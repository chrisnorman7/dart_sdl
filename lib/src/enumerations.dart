/// Automatically generated by `generate_enums.dart`.
import 'error.dart';
import 'sdl_bindings.dart';

/// SDL_bool.
enum SdlBool {
  /// SDL_FALSE = 0
  false_,

  /// SDL_TRUE = 1
  true_,
}

/// An extension for converting Dart to C values.
extension SdlBoolToInt on SdlBool {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case SdlBool.false_:
        return SDL_bool.SDL_FALSE;
      case SdlBool.true_:
        return SDL_bool.SDL_TRUE;
    }
  }
}

/// SDL_AssertState.
enum AssertState {
  /// SDL_ASSERTION_RETRY = 0
  assertionRetry,

  /// SDL_ASSERTION_BREAK = 1
  assertionBreak,

  /// SDL_ASSERTION_ABORT = 2
  assertionAbort,

  /// SDL_ASSERTION_IGNORE = 3
  assertionIgnore,

  /// SDL_ASSERTION_ALWAYS_IGNORE = 4
  assertionAlwaysIgnore,
}

/// An extension for converting Dart to C values.
extension AssertStateToInt on AssertState {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case AssertState.assertionRetry:
        return SDL_AssertState.SDL_ASSERTION_RETRY;
      case AssertState.assertionBreak:
        return SDL_AssertState.SDL_ASSERTION_BREAK;
      case AssertState.assertionAbort:
        return SDL_AssertState.SDL_ASSERTION_ABORT;
      case AssertState.assertionIgnore:
        return SDL_AssertState.SDL_ASSERTION_IGNORE;
      case AssertState.assertionAlwaysIgnore:
        return SDL_AssertState.SDL_ASSERTION_ALWAYS_IGNORE;
    }
  }
}

/// SDL_errorcode.
enum ErrorCode {
  /// SDL_ENOMEM = 0
  enomem,

  /// SDL_EFREAD = 1
  efread,

  /// SDL_EFWRITE = 2
  efwrite,

  /// SDL_EFSEEK = 3
  efseek,

  /// SDL_UNSUPPORTED = 4
  unsupported,

  /// SDL_LASTERROR = 5
  lasterror,
}

/// An extension for converting Dart to C values.
extension ErrorCodeToInt on ErrorCode {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case ErrorCode.enomem:
        return SDL_errorcode.SDL_ENOMEM;
      case ErrorCode.efread:
        return SDL_errorcode.SDL_EFREAD;
      case ErrorCode.efwrite:
        return SDL_errorcode.SDL_EFWRITE;
      case ErrorCode.efseek:
        return SDL_errorcode.SDL_EFSEEK;
      case ErrorCode.unsupported:
        return SDL_errorcode.SDL_UNSUPPORTED;
      case ErrorCode.lasterror:
        return SDL_errorcode.SDL_LASTERROR;
    }
  }
}

/// SDL_ThreadPriority.
enum ThreadPriority {
  /// SDL_THREAD_PRIORITY_LOW = 0
  threadPriorityLow,

  /// SDL_THREAD_PRIORITY_NORMAL = 1
  threadPriorityNormal,

  /// SDL_THREAD_PRIORITY_HIGH = 2
  threadPriorityHigh,

  /// SDL_THREAD_PRIORITY_TIME_CRITICAL = 3
  threadPriorityTimeCritical,
}

/// An extension for converting Dart to C values.
extension ThreadPriorityToInt on ThreadPriority {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case ThreadPriority.threadPriorityLow:
        return SDL_ThreadPriority.SDL_THREAD_PRIORITY_LOW;
      case ThreadPriority.threadPriorityNormal:
        return SDL_ThreadPriority.SDL_THREAD_PRIORITY_NORMAL;
      case ThreadPriority.threadPriorityHigh:
        return SDL_ThreadPriority.SDL_THREAD_PRIORITY_HIGH;
      case ThreadPriority.threadPriorityTimeCritical:
        return SDL_ThreadPriority.SDL_THREAD_PRIORITY_TIME_CRITICAL;
    }
  }
}

/// SDL_AudioStatus.
enum AudioStatus {
  /// SDL_AUDIO_STOPPED = 0
  stopped,

  /// SDL_AUDIO_PLAYING = 1
  playing,

  /// SDL_AUDIO_PAUSED = 2
  paused,
}

/// An extension for converting Dart to C values.
extension AudioStatusToInt on AudioStatus {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case AudioStatus.stopped:
        return SDL_AudioStatus.SDL_AUDIO_STOPPED;
      case AudioStatus.playing:
        return SDL_AudioStatus.SDL_AUDIO_PLAYING;
      case AudioStatus.paused:
        return SDL_AudioStatus.SDL_AUDIO_PAUSED;
    }
  }
}

/// SDL_PixelType.
enum PixelType {
  /// SDL_PIXELTYPE_UNKNOWN = 0
  unknown,

  /// SDL_PIXELTYPE_INDEX1 = 1
  index1,

  /// SDL_PIXELTYPE_INDEX4 = 2
  index4,

  /// SDL_PIXELTYPE_INDEX8 = 3
  index8,

  /// SDL_PIXELTYPE_PACKED8 = 4
  packed8,

  /// SDL_PIXELTYPE_PACKED16 = 5
  packed16,

  /// SDL_PIXELTYPE_PACKED32 = 6
  packed32,

  /// SDL_PIXELTYPE_ARRAYU8 = 7
  arrayu8,

  /// SDL_PIXELTYPE_ARRAYU16 = 8
  arrayu16,

  /// SDL_PIXELTYPE_ARRAYU32 = 9
  arrayu32,

  /// SDL_PIXELTYPE_ARRAYF16 = 10
  arrayf16,

  /// SDL_PIXELTYPE_ARRAYF32 = 11
  arrayf32,
}

/// An extension for converting Dart to C values.
extension PixelTypeToInt on PixelType {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case PixelType.unknown:
        return SDL_PixelType.SDL_PIXELTYPE_UNKNOWN;
      case PixelType.index1:
        return SDL_PixelType.SDL_PIXELTYPE_INDEX1;
      case PixelType.index4:
        return SDL_PixelType.SDL_PIXELTYPE_INDEX4;
      case PixelType.index8:
        return SDL_PixelType.SDL_PIXELTYPE_INDEX8;
      case PixelType.packed8:
        return SDL_PixelType.SDL_PIXELTYPE_PACKED8;
      case PixelType.packed16:
        return SDL_PixelType.SDL_PIXELTYPE_PACKED16;
      case PixelType.packed32:
        return SDL_PixelType.SDL_PIXELTYPE_PACKED32;
      case PixelType.arrayu8:
        return SDL_PixelType.SDL_PIXELTYPE_ARRAYU8;
      case PixelType.arrayu16:
        return SDL_PixelType.SDL_PIXELTYPE_ARRAYU16;
      case PixelType.arrayu32:
        return SDL_PixelType.SDL_PIXELTYPE_ARRAYU32;
      case PixelType.arrayf16:
        return SDL_PixelType.SDL_PIXELTYPE_ARRAYF16;
      case PixelType.arrayf32:
        return SDL_PixelType.SDL_PIXELTYPE_ARRAYF32;
    }
  }
}

/// SDL_BitmapOrder.
enum BitmapOrder {
  /// SDL_BITMAPORDER_NONE = 0
  none,

  /// SDL_BITMAPORDER_4321 = 1
  bitmapOrder4321,

  /// SDL_BITMAPORDER_1234 = 2
  bitmapOrder1234,
}

/// An extension for converting Dart to C values.
extension BitmapOrderToInt on BitmapOrder {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case BitmapOrder.none:
        return SDL_BitmapOrder.SDL_BITMAPORDER_NONE;
      case BitmapOrder.bitmapOrder4321:
        return SDL_BitmapOrder.SDL_BITMAPORDER_4321;
      case BitmapOrder.bitmapOrder1234:
        return SDL_BitmapOrder.SDL_BITMAPORDER_1234;
    }
  }
}

/// SDL_PackedOrder.
enum PackedOrder {
  /// SDL_PACKEDORDER_NONE = 0
  none,

  /// SDL_PACKEDORDER_XRGB = 1
  xrgb,

  /// SDL_PACKEDORDER_RGBX = 2
  rgbx,

  /// SDL_PACKEDORDER_ARGB = 3
  argb,

  /// SDL_PACKEDORDER_RGBA = 4
  rgba,

  /// SDL_PACKEDORDER_XBGR = 5
  xbgr,

  /// SDL_PACKEDORDER_BGRX = 6
  bgrx,

  /// SDL_PACKEDORDER_ABGR = 7
  abgr,

  /// SDL_PACKEDORDER_BGRA = 8
  bgra,
}

/// An extension for converting Dart to C values.
extension PackedOrderToInt on PackedOrder {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case PackedOrder.none:
        return SDL_PackedOrder.SDL_PACKEDORDER_NONE;
      case PackedOrder.xrgb:
        return SDL_PackedOrder.SDL_PACKEDORDER_XRGB;
      case PackedOrder.rgbx:
        return SDL_PackedOrder.SDL_PACKEDORDER_RGBX;
      case PackedOrder.argb:
        return SDL_PackedOrder.SDL_PACKEDORDER_ARGB;
      case PackedOrder.rgba:
        return SDL_PackedOrder.SDL_PACKEDORDER_RGBA;
      case PackedOrder.xbgr:
        return SDL_PackedOrder.SDL_PACKEDORDER_XBGR;
      case PackedOrder.bgrx:
        return SDL_PackedOrder.SDL_PACKEDORDER_BGRX;
      case PackedOrder.abgr:
        return SDL_PackedOrder.SDL_PACKEDORDER_ABGR;
      case PackedOrder.bgra:
        return SDL_PackedOrder.SDL_PACKEDORDER_BGRA;
    }
  }
}

/// SDL_ArrayOrder.
enum ArrayOrder {
  /// SDL_ARRAYORDER_NONE = 0
  none,

  /// SDL_ARRAYORDER_RGB = 1
  rgb,

  /// SDL_ARRAYORDER_RGBA = 2
  rgba,

  /// SDL_ARRAYORDER_ARGB = 3
  argb,

  /// SDL_ARRAYORDER_BGR = 4
  bgr,

  /// SDL_ARRAYORDER_BGRA = 5
  bgra,

  /// SDL_ARRAYORDER_ABGR = 6
  abgr,
}

/// An extension for converting Dart to C values.
extension ArrayOrderToInt on ArrayOrder {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case ArrayOrder.none:
        return SDL_ArrayOrder.SDL_ARRAYORDER_NONE;
      case ArrayOrder.rgb:
        return SDL_ArrayOrder.SDL_ARRAYORDER_RGB;
      case ArrayOrder.rgba:
        return SDL_ArrayOrder.SDL_ARRAYORDER_RGBA;
      case ArrayOrder.argb:
        return SDL_ArrayOrder.SDL_ARRAYORDER_ARGB;
      case ArrayOrder.bgr:
        return SDL_ArrayOrder.SDL_ARRAYORDER_BGR;
      case ArrayOrder.bgra:
        return SDL_ArrayOrder.SDL_ARRAYORDER_BGRA;
      case ArrayOrder.abgr:
        return SDL_ArrayOrder.SDL_ARRAYORDER_ABGR;
    }
  }
}

/// SDL_PackedLayout.
enum PackedLayout {
  /// SDL_PACKEDLAYOUT_NONE = 0
  none,

  /// SDL_PACKEDLAYOUT_332 = 1
  packedLayout332,

  /// SDL_PACKEDLAYOUT_4444 = 2
  packedLayout4444,

  /// SDL_PACKEDLAYOUT_1555 = 3
  packedLayout1555,

  /// SDL_PACKEDLAYOUT_5551 = 4
  packedLayout5551,

  /// SDL_PACKEDLAYOUT_565 = 5
  packedLayout565,

  /// SDL_PACKEDLAYOUT_8888 = 6
  packedLayout8888,

  /// SDL_PACKEDLAYOUT_2101010 = 7
  packedLayout2101010,

  /// SDL_PACKEDLAYOUT_1010102 = 8
  packedLayout1010102,
}

/// An extension for converting Dart to C values.
extension PackedLayoutToInt on PackedLayout {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case PackedLayout.none:
        return SDL_PackedLayout.SDL_PACKEDLAYOUT_NONE;
      case PackedLayout.packedLayout332:
        return SDL_PackedLayout.SDL_PACKEDLAYOUT_332;
      case PackedLayout.packedLayout4444:
        return SDL_PackedLayout.SDL_PACKEDLAYOUT_4444;
      case PackedLayout.packedLayout1555:
        return SDL_PackedLayout.SDL_PACKEDLAYOUT_1555;
      case PackedLayout.packedLayout5551:
        return SDL_PackedLayout.SDL_PACKEDLAYOUT_5551;
      case PackedLayout.packedLayout565:
        return SDL_PackedLayout.SDL_PACKEDLAYOUT_565;
      case PackedLayout.packedLayout8888:
        return SDL_PackedLayout.SDL_PACKEDLAYOUT_8888;
      case PackedLayout.packedLayout2101010:
        return SDL_PackedLayout.SDL_PACKEDLAYOUT_2101010;
      case PackedLayout.packedLayout1010102:
        return SDL_PackedLayout.SDL_PACKEDLAYOUT_1010102;
    }
  }
}

/// SDL_PixelFormatEnum.
enum PixelFormat {
  /// SDL_PIXELFORMAT_UNKNOWN = 0
  unknown,

  /// SDL_PIXELFORMAT_INDEX1LSB = 286261504
  index1lsb,

  /// SDL_PIXELFORMAT_INDEX1MSB = 287310080
  index1msb,

  /// SDL_PIXELFORMAT_INDEX4LSB = 303039488
  index4lsb,

  /// SDL_PIXELFORMAT_INDEX4MSB = 304088064
  index4msb,

  /// SDL_PIXELFORMAT_INDEX8 = 318769153
  index8,

  /// SDL_PIXELFORMAT_RGB332 = 336660481
  rgb332,

  /// SDL_PIXELFORMAT_XRGB4444 = 353504258
  xrgb4444,

  /// SDL_PIXELFORMAT_RGB444 = 353504258
  rgb444,

  /// SDL_PIXELFORMAT_XBGR4444 = 357698562
  xbgr4444,

  /// SDL_PIXELFORMAT_BGR444 = 357698562
  bgr444,

  /// SDL_PIXELFORMAT_XRGB1555 = 353570562
  xrgb1555,

  /// SDL_PIXELFORMAT_RGB555 = 353570562
  rgb555,

  /// SDL_PIXELFORMAT_XBGR1555 = 357764866
  xbgr1555,

  /// SDL_PIXELFORMAT_BGR555 = 357764866
  bgr555,

  /// SDL_PIXELFORMAT_ARGB4444 = 355602434
  argb4444,

  /// SDL_PIXELFORMAT_RGBA4444 = 356651010
  rgba4444,

  /// SDL_PIXELFORMAT_ABGR4444 = 359796738
  abgr4444,

  /// SDL_PIXELFORMAT_BGRA4444 = 360845314
  bgra4444,

  /// SDL_PIXELFORMAT_ARGB1555 = 355667970
  argb1555,

  /// SDL_PIXELFORMAT_RGBA5551 = 356782082
  rgba5551,

  /// SDL_PIXELFORMAT_ABGR1555 = 359862274
  abgr1555,

  /// SDL_PIXELFORMAT_BGRA5551 = 360976386
  bgra5551,

  /// SDL_PIXELFORMAT_RGB565 = 353701890
  rgb565,

  /// SDL_PIXELFORMAT_BGR565 = 357896194
  bgr565,

  /// SDL_PIXELFORMAT_RGB24 = 386930691
  rgb24,

  /// SDL_PIXELFORMAT_BGR24 = 390076419
  bgr24,

  /// SDL_PIXELFORMAT_XRGB8888 = 370546692
  xrgb8888,

  /// SDL_PIXELFORMAT_RGB888 = 370546692
  rgb888,

  /// SDL_PIXELFORMAT_RGBX8888 = 371595268
  rgbx8888,

  /// SDL_PIXELFORMAT_XBGR8888 = 374740996
  xbgr8888,

  /// SDL_PIXELFORMAT_BGR888 = 374740996
  bgr888,

  /// SDL_PIXELFORMAT_BGRX8888 = 375789572
  bgrx8888,

  /// SDL_PIXELFORMAT_ARGB8888 = 372645892
  argb8888,

  /// SDL_PIXELFORMAT_RGBA8888 = 373694468
  rgba8888,

  /// SDL_PIXELFORMAT_ABGR8888 = 376840196
  abgr8888,

  /// SDL_PIXELFORMAT_BGRA8888 = 377888772
  bgra8888,

  /// SDL_PIXELFORMAT_ARGB2101010 = 372711428
  argb2101010,

  /// SDL_PIXELFORMAT_RGBA32 = 376840196
  rgba32,

  /// SDL_PIXELFORMAT_ARGB32 = 377888772
  argb32,

  /// SDL_PIXELFORMAT_BGRA32 = 372645892
  bgra32,

  /// SDL_PIXELFORMAT_ABGR32 = 373694468
  abgr32,

  /// SDL_PIXELFORMAT_YV12 = 842094169
  yv12,

  /// SDL_PIXELFORMAT_IYUV = 1448433993
  iyuv,

  /// SDL_PIXELFORMAT_YUY2 = 844715353
  yuy2,

  /// SDL_PIXELFORMAT_UYVY = 1498831189
  uyvy,

  /// SDL_PIXELFORMAT_YVYU = 1431918169
  yvyu,

  /// SDL_PIXELFORMAT_NV12 = 842094158
  nv12,

  /// SDL_PIXELFORMAT_NV21 = 825382478
  nv21,

  /// SDL_PIXELFORMAT_EXTERNAL_OES = 542328143
  externalOes,
}

/// An extension for converting Dart to C values.
extension PixelFormatToInt on PixelFormat {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case PixelFormat.unknown:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_UNKNOWN;
      case PixelFormat.index1lsb:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX1LSB;
      case PixelFormat.index1msb:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX1MSB;
      case PixelFormat.index4lsb:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX4LSB;
      case PixelFormat.index4msb:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX4MSB;
      case PixelFormat.index8:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX8;
      case PixelFormat.rgb332:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB332;
      case PixelFormat.xrgb4444:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_XRGB4444;
      case PixelFormat.rgb444:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB444;
      case PixelFormat.xbgr4444:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_XBGR4444;
      case PixelFormat.bgr444:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGR444;
      case PixelFormat.xrgb1555:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_XRGB1555;
      case PixelFormat.rgb555:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB555;
      case PixelFormat.xbgr1555:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_XBGR1555;
      case PixelFormat.bgr555:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGR555;
      case PixelFormat.argb4444:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB4444;
      case PixelFormat.rgba4444:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBA4444;
      case PixelFormat.abgr4444:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_ABGR4444;
      case PixelFormat.bgra4444:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRA4444;
      case PixelFormat.argb1555:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB1555;
      case PixelFormat.rgba5551:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBA5551;
      case PixelFormat.abgr1555:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_ABGR1555;
      case PixelFormat.bgra5551:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRA5551;
      case PixelFormat.rgb565:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB565;
      case PixelFormat.bgr565:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGR565;
      case PixelFormat.rgb24:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB24;
      case PixelFormat.bgr24:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGR24;
      case PixelFormat.xrgb8888:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_XRGB8888;
      case PixelFormat.rgb888:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB888;
      case PixelFormat.rgbx8888:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBX8888;
      case PixelFormat.xbgr8888:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_XBGR8888;
      case PixelFormat.bgr888:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGR888;
      case PixelFormat.bgrx8888:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRX8888;
      case PixelFormat.argb8888:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB8888;
      case PixelFormat.rgba8888:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBA8888;
      case PixelFormat.abgr8888:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_ABGR8888;
      case PixelFormat.bgra8888:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRA8888;
      case PixelFormat.argb2101010:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB2101010;
      case PixelFormat.rgba32:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBA32;
      case PixelFormat.argb32:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB32;
      case PixelFormat.bgra32:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRA32;
      case PixelFormat.abgr32:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_ABGR32;
      case PixelFormat.yv12:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_YV12;
      case PixelFormat.iyuv:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_IYUV;
      case PixelFormat.yuy2:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_YUY2;
      case PixelFormat.uyvy:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_UYVY;
      case PixelFormat.yvyu:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_YVYU;
      case PixelFormat.nv12:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_NV12;
      case PixelFormat.nv21:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_NV21;
      case PixelFormat.externalOes:
        return SDL_PixelFormatEnum.SDL_PIXELFORMAT_EXTERNAL_OES;
    }
  }
}

/// SDL_BlendMode.
enum BlendMode {
  /// SDL_BLENDMODE_NONE = 0
  none,

  /// SDL_BLENDMODE_BLEND = 1
  blend,

  /// SDL_BLENDMODE_ADD = 2
  add,

  /// SDL_BLENDMODE_MOD = 4
  mod,

  /// SDL_BLENDMODE_MUL = 8
  mul,

  /// SDL_BLENDMODE_INVALID = 2147483647
  invalid,
}

/// An extension for converting Dart to C values.
extension BlendModeToInt on BlendMode {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case BlendMode.none:
        return SDL_BlendMode.SDL_BLENDMODE_NONE;
      case BlendMode.blend:
        return SDL_BlendMode.SDL_BLENDMODE_BLEND;
      case BlendMode.add:
        return SDL_BlendMode.SDL_BLENDMODE_ADD;
      case BlendMode.mod:
        return SDL_BlendMode.SDL_BLENDMODE_MOD;
      case BlendMode.mul:
        return SDL_BlendMode.SDL_BLENDMODE_MUL;
      case BlendMode.invalid:
        return SDL_BlendMode.SDL_BLENDMODE_INVALID;
    }
  }
}

/// SDL_BlendOperation.
enum BlendOperation {
  /// SDL_BLENDOPERATION_ADD = 1
  add,

  /// SDL_BLENDOPERATION_SUBTRACT = 2
  subtract,

  /// SDL_BLENDOPERATION_REV_SUBTRACT = 3
  revSubtract,

  /// SDL_BLENDOPERATION_MINIMUM = 4
  minimum,

  /// SDL_BLENDOPERATION_MAXIMUM = 5
  maximum,
}

/// An extension for converting Dart to C values.
extension BlendOperationToInt on BlendOperation {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case BlendOperation.add:
        return SDL_BlendOperation.SDL_BLENDOPERATION_ADD;
      case BlendOperation.subtract:
        return SDL_BlendOperation.SDL_BLENDOPERATION_SUBTRACT;
      case BlendOperation.revSubtract:
        return SDL_BlendOperation.SDL_BLENDOPERATION_REV_SUBTRACT;
      case BlendOperation.minimum:
        return SDL_BlendOperation.SDL_BLENDOPERATION_MINIMUM;
      case BlendOperation.maximum:
        return SDL_BlendOperation.SDL_BLENDOPERATION_MAXIMUM;
    }
  }
}

/// SDL_BlendFactor.
enum BlendFactor {
  /// SDL_BLENDFACTOR_ZERO = 1
  zero,

  /// SDL_BLENDFACTOR_ONE = 2
  one,

  /// SDL_BLENDFACTOR_SRC_COLOR = 3
  srcColor,

  /// SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4
  oneMinusSrcColor,

  /// SDL_BLENDFACTOR_SRC_ALPHA = 5
  srcAlpha,

  /// SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6
  oneMinusSrcAlpha,

  /// SDL_BLENDFACTOR_DST_COLOR = 7
  dstColor,

  /// SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8
  oneMinusDstColor,

  /// SDL_BLENDFACTOR_DST_ALPHA = 9
  dstAlpha,

  /// SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10
  oneMinusDstAlpha,
}

/// An extension for converting Dart to C values.
extension BlendFactorToInt on BlendFactor {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case BlendFactor.zero:
        return SDL_BlendFactor.SDL_BLENDFACTOR_ZERO;
      case BlendFactor.one:
        return SDL_BlendFactor.SDL_BLENDFACTOR_ONE;
      case BlendFactor.srcColor:
        return SDL_BlendFactor.SDL_BLENDFACTOR_SRC_COLOR;
      case BlendFactor.oneMinusSrcColor:
        return SDL_BlendFactor.SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR;
      case BlendFactor.srcAlpha:
        return SDL_BlendFactor.SDL_BLENDFACTOR_SRC_ALPHA;
      case BlendFactor.oneMinusSrcAlpha:
        return SDL_BlendFactor.SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA;
      case BlendFactor.dstColor:
        return SDL_BlendFactor.SDL_BLENDFACTOR_DST_COLOR;
      case BlendFactor.oneMinusDstColor:
        return SDL_BlendFactor.SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR;
      case BlendFactor.dstAlpha:
        return SDL_BlendFactor.SDL_BLENDFACTOR_DST_ALPHA;
      case BlendFactor.oneMinusDstAlpha:
        return SDL_BlendFactor.SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA;
    }
  }
}

/// SDL_YUV_CONVERSION_MODE.
enum YuvConversionMode {
  /// SDL_YUV_CONVERSION_JPEG = 0
  jpeg,

  /// SDL_YUV_CONVERSION_BT601 = 1
  bt601,

  /// SDL_YUV_CONVERSION_BT709 = 2
  bt709,

  /// SDL_YUV_CONVERSION_AUTOMATIC = 3
  automatic,
}

/// An extension for converting Dart to C values.
extension YuvConversionModeToInt on YuvConversionMode {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case YuvConversionMode.jpeg:
        return SDL_YUV_CONVERSION_MODE.SDL_YUV_CONVERSION_JPEG;
      case YuvConversionMode.bt601:
        return SDL_YUV_CONVERSION_MODE.SDL_YUV_CONVERSION_BT601;
      case YuvConversionMode.bt709:
        return SDL_YUV_CONVERSION_MODE.SDL_YUV_CONVERSION_BT709;
      case YuvConversionMode.automatic:
        return SDL_YUV_CONVERSION_MODE.SDL_YUV_CONVERSION_AUTOMATIC;
    }
  }
}

/// SDL_WindowFlags.
enum WindowFlags {
  /// SDL_WINDOW_FULLSCREEN = 1
  fullscreen,

  /// SDL_WINDOW_OPENGL = 2
  opengl,

  /// SDL_WINDOW_SHOWN = 4
  shown,

  /// SDL_WINDOW_HIDDEN = 8
  hidden,

  /// SDL_WINDOW_BORDERLESS = 16
  borderless,

  /// SDL_WINDOW_RESIZABLE = 32
  resizable,

  /// SDL_WINDOW_MINIMIZED = 64
  minimized,

  /// SDL_WINDOW_MAXIMIZED = 128
  maximized,

  /// SDL_WINDOW_INPUT_GRABBED = 256
  inputGrabbed,

  /// SDL_WINDOW_INPUT_FOCUS = 512
  inputFocus,

  /// SDL_WINDOW_MOUSE_FOCUS = 1024
  mouseFocus,

  /// SDL_WINDOW_FULLSCREEN_DESKTOP = 4097
  fullscreenDesktop,

  /// SDL_WINDOW_FOREIGN = 2048
  foreign,

  /// SDL_WINDOW_ALLOW_HIGHDPI = 8192
  allowHighdpi,

  /// SDL_WINDOW_MOUSE_CAPTURE = 16384
  mouseCapture,

  /// SDL_WINDOW_ALWAYS_ON_TOP = 32768
  alwaysOnTop,

  /// SDL_WINDOW_SKIP_TASKBAR = 65536
  skipTaskbar,

  /// SDL_WINDOW_UTILITY = 131072
  utility,

  /// SDL_WINDOW_TOOLTIP = 262144
  tooltip,

  /// SDL_WINDOW_POPUP_MENU = 524288
  popupMenu,

  /// SDL_WINDOW_VULKAN = 268435456
  vulkan,

  /// SDL_WINDOW_METAL = 536870912
  metal,
}

/// An extension for converting Dart to C values.
extension WindowFlagsToInt on WindowFlags {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case WindowFlags.fullscreen:
        return SDL_WindowFlags.SDL_WINDOW_FULLSCREEN;
      case WindowFlags.opengl:
        return SDL_WindowFlags.SDL_WINDOW_OPENGL;
      case WindowFlags.shown:
        return SDL_WindowFlags.SDL_WINDOW_SHOWN;
      case WindowFlags.hidden:
        return SDL_WindowFlags.SDL_WINDOW_HIDDEN;
      case WindowFlags.borderless:
        return SDL_WindowFlags.SDL_WINDOW_BORDERLESS;
      case WindowFlags.resizable:
        return SDL_WindowFlags.SDL_WINDOW_RESIZABLE;
      case WindowFlags.minimized:
        return SDL_WindowFlags.SDL_WINDOW_MINIMIZED;
      case WindowFlags.maximized:
        return SDL_WindowFlags.SDL_WINDOW_MAXIMIZED;
      case WindowFlags.inputGrabbed:
        return SDL_WindowFlags.SDL_WINDOW_INPUT_GRABBED;
      case WindowFlags.inputFocus:
        return SDL_WindowFlags.SDL_WINDOW_INPUT_FOCUS;
      case WindowFlags.mouseFocus:
        return SDL_WindowFlags.SDL_WINDOW_MOUSE_FOCUS;
      case WindowFlags.fullscreenDesktop:
        return SDL_WindowFlags.SDL_WINDOW_FULLSCREEN_DESKTOP;
      case WindowFlags.foreign:
        return SDL_WindowFlags.SDL_WINDOW_FOREIGN;
      case WindowFlags.allowHighdpi:
        return SDL_WindowFlags.SDL_WINDOW_ALLOW_HIGHDPI;
      case WindowFlags.mouseCapture:
        return SDL_WindowFlags.SDL_WINDOW_MOUSE_CAPTURE;
      case WindowFlags.alwaysOnTop:
        return SDL_WindowFlags.SDL_WINDOW_ALWAYS_ON_TOP;
      case WindowFlags.skipTaskbar:
        return SDL_WindowFlags.SDL_WINDOW_SKIP_TASKBAR;
      case WindowFlags.utility:
        return SDL_WindowFlags.SDL_WINDOW_UTILITY;
      case WindowFlags.tooltip:
        return SDL_WindowFlags.SDL_WINDOW_TOOLTIP;
      case WindowFlags.popupMenu:
        return SDL_WindowFlags.SDL_WINDOW_POPUP_MENU;
      case WindowFlags.vulkan:
        return SDL_WindowFlags.SDL_WINDOW_VULKAN;
      case WindowFlags.metal:
        return SDL_WindowFlags.SDL_WINDOW_METAL;
    }
  }
}

/// SDL_WindowEventID.
enum WindowEventID {
  /// SDL_WINDOWEVENT_NONE = 0
  none,

  /// SDL_WINDOWEVENT_SHOWN = 1
  shown,

  /// SDL_WINDOWEVENT_HIDDEN = 2
  hidden,

  /// SDL_WINDOWEVENT_EXPOSED = 3
  exposed,

  /// SDL_WINDOWEVENT_MOVED = 4
  moved,

  /// SDL_WINDOWEVENT_RESIZED = 5
  resized,

  /// SDL_WINDOWEVENT_SIZE_CHANGED = 6
  sizeChanged,

  /// SDL_WINDOWEVENT_MINIMIZED = 7
  minimized,

  /// SDL_WINDOWEVENT_MAXIMIZED = 8
  maximized,

  /// SDL_WINDOWEVENT_RESTORED = 9
  restored,

  /// SDL_WINDOWEVENT_ENTER = 10
  enter,

  /// SDL_WINDOWEVENT_LEAVE = 11
  leave,

  /// SDL_WINDOWEVENT_FOCUS_GAINED = 12
  focusGained,

  /// SDL_WINDOWEVENT_FOCUS_LOST = 13
  focusLost,

  /// SDL_WINDOWEVENT_CLOSE = 14
  close,

  /// SDL_WINDOWEVENT_TAKE_FOCUS = 15
  takeFocus,

  /// SDL_WINDOWEVENT_HIT_TEST = 16
  hitTest,
}

/// An extension for converting Dart to C values.
extension WindowEventIDToInt on WindowEventID {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case WindowEventID.none:
        return SDL_WindowEventID.SDL_WINDOWEVENT_NONE;
      case WindowEventID.shown:
        return SDL_WindowEventID.SDL_WINDOWEVENT_SHOWN;
      case WindowEventID.hidden:
        return SDL_WindowEventID.SDL_WINDOWEVENT_HIDDEN;
      case WindowEventID.exposed:
        return SDL_WindowEventID.SDL_WINDOWEVENT_EXPOSED;
      case WindowEventID.moved:
        return SDL_WindowEventID.SDL_WINDOWEVENT_MOVED;
      case WindowEventID.resized:
        return SDL_WindowEventID.SDL_WINDOWEVENT_RESIZED;
      case WindowEventID.sizeChanged:
        return SDL_WindowEventID.SDL_WINDOWEVENT_SIZE_CHANGED;
      case WindowEventID.minimized:
        return SDL_WindowEventID.SDL_WINDOWEVENT_MINIMIZED;
      case WindowEventID.maximized:
        return SDL_WindowEventID.SDL_WINDOWEVENT_MAXIMIZED;
      case WindowEventID.restored:
        return SDL_WindowEventID.SDL_WINDOWEVENT_RESTORED;
      case WindowEventID.enter:
        return SDL_WindowEventID.SDL_WINDOWEVENT_ENTER;
      case WindowEventID.leave:
        return SDL_WindowEventID.SDL_WINDOWEVENT_LEAVE;
      case WindowEventID.focusGained:
        return SDL_WindowEventID.SDL_WINDOWEVENT_FOCUS_GAINED;
      case WindowEventID.focusLost:
        return SDL_WindowEventID.SDL_WINDOWEVENT_FOCUS_LOST;
      case WindowEventID.close:
        return SDL_WindowEventID.SDL_WINDOWEVENT_CLOSE;
      case WindowEventID.takeFocus:
        return SDL_WindowEventID.SDL_WINDOWEVENT_TAKE_FOCUS;
      case WindowEventID.hitTest:
        return SDL_WindowEventID.SDL_WINDOWEVENT_HIT_TEST;
    }
  }
}

/// SDL_DisplayEventID.
enum DisplayEventID {
  /// SDL_DISPLAYEVENT_NONE = 0
  none,

  /// SDL_DISPLAYEVENT_ORIENTATION = 1
  orientation,

  /// SDL_DISPLAYEVENT_CONNECTED = 2
  connected,

  /// SDL_DISPLAYEVENT_DISCONNECTED = 3
  disconnected,
}

/// An extension for converting Dart to C values.
extension DisplayEventIDToInt on DisplayEventID {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case DisplayEventID.none:
        return SDL_DisplayEventID.SDL_DISPLAYEVENT_NONE;
      case DisplayEventID.orientation:
        return SDL_DisplayEventID.SDL_DISPLAYEVENT_ORIENTATION;
      case DisplayEventID.connected:
        return SDL_DisplayEventID.SDL_DISPLAYEVENT_CONNECTED;
      case DisplayEventID.disconnected:
        return SDL_DisplayEventID.SDL_DISPLAYEVENT_DISCONNECTED;
    }
  }
}

/// SDL_DisplayOrientation.
enum DisplayOrientation {
  /// SDL_ORIENTATION_UNKNOWN = 0
  unknown,

  /// SDL_ORIENTATION_LANDSCAPE = 1
  landscape,

  /// SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2
  landscapeFlipped,

  /// SDL_ORIENTATION_PORTRAIT = 3
  portrait,

  /// SDL_ORIENTATION_PORTRAIT_FLIPPED = 4
  portraitFlipped,
}

/// An extension for converting Dart to C values.
extension DisplayOrientationToInt on DisplayOrientation {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case DisplayOrientation.unknown:
        return SDL_DisplayOrientation.SDL_ORIENTATION_UNKNOWN;
      case DisplayOrientation.landscape:
        return SDL_DisplayOrientation.SDL_ORIENTATION_LANDSCAPE;
      case DisplayOrientation.landscapeFlipped:
        return SDL_DisplayOrientation.SDL_ORIENTATION_LANDSCAPE_FLIPPED;
      case DisplayOrientation.portrait:
        return SDL_DisplayOrientation.SDL_ORIENTATION_PORTRAIT;
      case DisplayOrientation.portraitFlipped:
        return SDL_DisplayOrientation.SDL_ORIENTATION_PORTRAIT_FLIPPED;
    }
  }
}

/// SDL_GLattr.
enum GLattr {
  /// SDL_GL_RED_SIZE = 0
  redSize,

  /// SDL_GL_GREEN_SIZE = 1
  greenSize,

  /// SDL_GL_BLUE_SIZE = 2
  blueSize,

  /// SDL_GL_ALPHA_SIZE = 3
  alphaSize,

  /// SDL_GL_BUFFER_SIZE = 4
  bufferSize,

  /// SDL_GL_DOUBLEBUFFER = 5
  doublebuffer,

  /// SDL_GL_DEPTH_SIZE = 6
  depthSize,

  /// SDL_GL_STENCIL_SIZE = 7
  stencilSize,

  /// SDL_GL_ACCUM_RED_SIZE = 8
  accumRedSize,

  /// SDL_GL_ACCUM_GREEN_SIZE = 9
  accumGreenSize,

  /// SDL_GL_ACCUM_BLUE_SIZE = 10
  accumBlueSize,

  /// SDL_GL_ACCUM_ALPHA_SIZE = 11
  accumAlphaSize,

  /// SDL_GL_STEREO = 12
  stereo,

  /// SDL_GL_MULTISAMPLEBUFFERS = 13
  multisamplebuffers,

  /// SDL_GL_MULTISAMPLESAMPLES = 14
  multisamplesamples,

  /// SDL_GL_ACCELERATED_VISUAL = 15
  acceleratedVisual,

  /// SDL_GL_RETAINED_BACKING = 16
  retainedBacking,

  /// SDL_GL_CONTEXT_MAJOR_VERSION = 17
  contextMajorVersion,

  /// SDL_GL_CONTEXT_MINOR_VERSION = 18
  contextMinorVersion,

  /// SDL_GL_CONTEXT_EGL = 19
  contextEgl,

  /// SDL_GL_CONTEXT_FLAGS = 20
  contextFlags,

  /// SDL_GL_CONTEXT_PROFILE_MASK = 21
  contextProfileMask,

  /// SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 22
  shareWithCurrentContext,

  /// SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 23
  framebufferSrgbCapable,

  /// SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 24
  contextReleaseBehavior,

  /// SDL_GL_CONTEXT_RESET_NOTIFICATION = 25
  contextResetNotification,

  /// SDL_GL_CONTEXT_NO_ERROR = 26
  contextNoError,
}

/// An extension for converting Dart to C values.
extension GLattrToInt on GLattr {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case GLattr.redSize:
        return SDL_GLattr.SDL_GL_RED_SIZE;
      case GLattr.greenSize:
        return SDL_GLattr.SDL_GL_GREEN_SIZE;
      case GLattr.blueSize:
        return SDL_GLattr.SDL_GL_BLUE_SIZE;
      case GLattr.alphaSize:
        return SDL_GLattr.SDL_GL_ALPHA_SIZE;
      case GLattr.bufferSize:
        return SDL_GLattr.SDL_GL_BUFFER_SIZE;
      case GLattr.doublebuffer:
        return SDL_GLattr.SDL_GL_DOUBLEBUFFER;
      case GLattr.depthSize:
        return SDL_GLattr.SDL_GL_DEPTH_SIZE;
      case GLattr.stencilSize:
        return SDL_GLattr.SDL_GL_STENCIL_SIZE;
      case GLattr.accumRedSize:
        return SDL_GLattr.SDL_GL_ACCUM_RED_SIZE;
      case GLattr.accumGreenSize:
        return SDL_GLattr.SDL_GL_ACCUM_GREEN_SIZE;
      case GLattr.accumBlueSize:
        return SDL_GLattr.SDL_GL_ACCUM_BLUE_SIZE;
      case GLattr.accumAlphaSize:
        return SDL_GLattr.SDL_GL_ACCUM_ALPHA_SIZE;
      case GLattr.stereo:
        return SDL_GLattr.SDL_GL_STEREO;
      case GLattr.multisamplebuffers:
        return SDL_GLattr.SDL_GL_MULTISAMPLEBUFFERS;
      case GLattr.multisamplesamples:
        return SDL_GLattr.SDL_GL_MULTISAMPLESAMPLES;
      case GLattr.acceleratedVisual:
        return SDL_GLattr.SDL_GL_ACCELERATED_VISUAL;
      case GLattr.retainedBacking:
        return SDL_GLattr.SDL_GL_RETAINED_BACKING;
      case GLattr.contextMajorVersion:
        return SDL_GLattr.SDL_GL_CONTEXT_MAJOR_VERSION;
      case GLattr.contextMinorVersion:
        return SDL_GLattr.SDL_GL_CONTEXT_MINOR_VERSION;
      case GLattr.contextEgl:
        return SDL_GLattr.SDL_GL_CONTEXT_EGL;
      case GLattr.contextFlags:
        return SDL_GLattr.SDL_GL_CONTEXT_FLAGS;
      case GLattr.contextProfileMask:
        return SDL_GLattr.SDL_GL_CONTEXT_PROFILE_MASK;
      case GLattr.shareWithCurrentContext:
        return SDL_GLattr.SDL_GL_SHARE_WITH_CURRENT_CONTEXT;
      case GLattr.framebufferSrgbCapable:
        return SDL_GLattr.SDL_GL_FRAMEBUFFER_SRGB_CAPABLE;
      case GLattr.contextReleaseBehavior:
        return SDL_GLattr.SDL_GL_CONTEXT_RELEASE_BEHAVIOR;
      case GLattr.contextResetNotification:
        return SDL_GLattr.SDL_GL_CONTEXT_RESET_NOTIFICATION;
      case GLattr.contextNoError:
        return SDL_GLattr.SDL_GL_CONTEXT_NO_ERROR;
    }
  }
}

/// SDL_GLprofile.
enum GLprofile {
  /// SDL_GL_CONTEXT_PROFILE_CORE = 1
  core,

  /// SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 2
  compatibility,

  /// SDL_GL_CONTEXT_PROFILE_ES = 4
  es,
}

/// An extension for converting Dart to C values.
extension GLprofileToInt on GLprofile {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case GLprofile.core:
        return SDL_GLprofile.SDL_GL_CONTEXT_PROFILE_CORE;
      case GLprofile.compatibility:
        return SDL_GLprofile.SDL_GL_CONTEXT_PROFILE_COMPATIBILITY;
      case GLprofile.es:
        return SDL_GLprofile.SDL_GL_CONTEXT_PROFILE_ES;
    }
  }
}

/// SDL_GLcontextFlag.
enum GLcontextFlag {
  /// SDL_GL_CONTEXT_DEBUG_FLAG = 1
  glContextDebugFlag,

  /// SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 2
  glContextForwardCompatibleFlag,

  /// SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 4
  glContextRobustAccessFlag,

  /// SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 8
  glContextResetIsolationFlag,
}

/// An extension for converting Dart to C values.
extension GLcontextFlagToInt on GLcontextFlag {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case GLcontextFlag.glContextDebugFlag:
        return SDL_GLcontextFlag.SDL_GL_CONTEXT_DEBUG_FLAG;
      case GLcontextFlag.glContextForwardCompatibleFlag:
        return SDL_GLcontextFlag.SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG;
      case GLcontextFlag.glContextRobustAccessFlag:
        return SDL_GLcontextFlag.SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG;
      case GLcontextFlag.glContextResetIsolationFlag:
        return SDL_GLcontextFlag.SDL_GL_CONTEXT_RESET_ISOLATION_FLAG;
    }
  }
}

/// SDL_GLcontextReleaseFlag.
enum GLcontextReleaseFlag {
  /// SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0
  none,

  /// SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 1
  flush,
}

/// An extension for converting Dart to C values.
extension GLcontextReleaseFlagToInt on GLcontextReleaseFlag {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case GLcontextReleaseFlag.none:
        return SDL_GLcontextReleaseFlag.SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE;
      case GLcontextReleaseFlag.flush:
        return SDL_GLcontextReleaseFlag.SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH;
    }
  }
}

/// SDL_GLContextResetNotification.
enum GLContextResetNotification {
  /// SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0
  noNotification,

  /// SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 1
  loseContext,
}

/// An extension for converting Dart to C values.
extension GLContextResetNotificationToInt on GLContextResetNotification {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case GLContextResetNotification.noNotification:
        return SDL_GLContextResetNotification
            .SDL_GL_CONTEXT_RESET_NO_NOTIFICATION;
      case GLContextResetNotification.loseContext:
        return SDL_GLContextResetNotification.SDL_GL_CONTEXT_RESET_LOSE_CONTEXT;
    }
  }
}

/// SDL_HitTestResult.
enum HitTestResult {
  /// SDL_HITTEST_NORMAL = 0
  normal,

  /// SDL_HITTEST_DRAGGABLE = 1
  draggable,

  /// SDL_HITTEST_RESIZE_TOPLEFT = 2
  resizeTopleft,

  /// SDL_HITTEST_RESIZE_TOP = 3
  resizeTop,

  /// SDL_HITTEST_RESIZE_TOPRIGHT = 4
  resizeTopright,

  /// SDL_HITTEST_RESIZE_RIGHT = 5
  resizeRight,

  /// SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6
  resizeBottomright,

  /// SDL_HITTEST_RESIZE_BOTTOM = 7
  resizeBottom,

  /// SDL_HITTEST_RESIZE_BOTTOMLEFT = 8
  resizeBottomleft,

  /// SDL_HITTEST_RESIZE_LEFT = 9
  resizeLeft,
}

/// An extension for converting Dart to C values.
extension HitTestResultToInt on HitTestResult {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case HitTestResult.normal:
        return SDL_HitTestResult.SDL_HITTEST_NORMAL;
      case HitTestResult.draggable:
        return SDL_HitTestResult.SDL_HITTEST_DRAGGABLE;
      case HitTestResult.resizeTopleft:
        return SDL_HitTestResult.SDL_HITTEST_RESIZE_TOPLEFT;
      case HitTestResult.resizeTop:
        return SDL_HitTestResult.SDL_HITTEST_RESIZE_TOP;
      case HitTestResult.resizeTopright:
        return SDL_HitTestResult.SDL_HITTEST_RESIZE_TOPRIGHT;
      case HitTestResult.resizeRight:
        return SDL_HitTestResult.SDL_HITTEST_RESIZE_RIGHT;
      case HitTestResult.resizeBottomright:
        return SDL_HitTestResult.SDL_HITTEST_RESIZE_BOTTOMRIGHT;
      case HitTestResult.resizeBottom:
        return SDL_HitTestResult.SDL_HITTEST_RESIZE_BOTTOM;
      case HitTestResult.resizeBottomleft:
        return SDL_HitTestResult.SDL_HITTEST_RESIZE_BOTTOMLEFT;
      case HitTestResult.resizeLeft:
        return SDL_HitTestResult.SDL_HITTEST_RESIZE_LEFT;
    }
  }
}

/// SDL_SystemCursor.
enum SystemCursor {
  /// SDL_SYSTEM_CURSOR_ARROW = 0
  arrow,

  /// SDL_SYSTEM_CURSOR_IBEAM = 1
  ibeam,

  /// SDL_SYSTEM_CURSOR_WAIT = 2
  wait,

  /// SDL_SYSTEM_CURSOR_CROSSHAIR = 3
  crosshair,

  /// SDL_SYSTEM_CURSOR_WAITARROW = 4
  waitarrow,

  /// SDL_SYSTEM_CURSOR_SIZENWSE = 5
  sizenwse,

  /// SDL_SYSTEM_CURSOR_SIZENESW = 6
  sizenesw,

  /// SDL_SYSTEM_CURSOR_SIZEWE = 7
  sizewe,

  /// SDL_SYSTEM_CURSOR_SIZENS = 8
  sizens,

  /// SDL_SYSTEM_CURSOR_SIZEALL = 9
  sizeall,

  /// SDL_SYSTEM_CURSOR_NO = 10
  no,

  /// SDL_SYSTEM_CURSOR_HAND = 11
  hand,

  /// SDL_NUM_SYSTEM_CURSORS = 12
  numSystemCursors,
}

/// An extension for converting Dart to C values.
extension SystemCursorToInt on SystemCursor {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case SystemCursor.arrow:
        return SDL_SystemCursor.SDL_SYSTEM_CURSOR_ARROW;
      case SystemCursor.ibeam:
        return SDL_SystemCursor.SDL_SYSTEM_CURSOR_IBEAM;
      case SystemCursor.wait:
        return SDL_SystemCursor.SDL_SYSTEM_CURSOR_WAIT;
      case SystemCursor.crosshair:
        return SDL_SystemCursor.SDL_SYSTEM_CURSOR_CROSSHAIR;
      case SystemCursor.waitarrow:
        return SDL_SystemCursor.SDL_SYSTEM_CURSOR_WAITARROW;
      case SystemCursor.sizenwse:
        return SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZENWSE;
      case SystemCursor.sizenesw:
        return SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZENESW;
      case SystemCursor.sizewe:
        return SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZEWE;
      case SystemCursor.sizens:
        return SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZENS;
      case SystemCursor.sizeall:
        return SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZEALL;
      case SystemCursor.no:
        return SDL_SystemCursor.SDL_SYSTEM_CURSOR_NO;
      case SystemCursor.hand:
        return SDL_SystemCursor.SDL_SYSTEM_CURSOR_HAND;
      case SystemCursor.numSystemCursors:
        return SDL_SystemCursor.SDL_NUM_SYSTEM_CURSORS;
    }
  }
}

/// SDL_MouseWheelDirection.
enum MouseWheelDirection {
  /// SDL_MOUSEWHEEL_NORMAL = 0
  normal,

  /// SDL_MOUSEWHEEL_FLIPPED = 1
  flipped,
}

/// An extension for converting Dart to C values.
extension MouseWheelDirectionToInt on MouseWheelDirection {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case MouseWheelDirection.normal:
        return SDL_MouseWheelDirection.SDL_MOUSEWHEEL_NORMAL;
      case MouseWheelDirection.flipped:
        return SDL_MouseWheelDirection.SDL_MOUSEWHEEL_FLIPPED;
    }
  }
}

/// SDL_JoystickType.
enum JoystickType {
  /// SDL_JOYSTICK_TYPE_UNKNOWN = 0
  unknown,

  /// SDL_JOYSTICK_TYPE_GAMECONTROLLER = 1
  gamecontroller,

  /// SDL_JOYSTICK_TYPE_WHEEL = 2
  wheel,

  /// SDL_JOYSTICK_TYPE_ARCADE_STICK = 3
  arcadeStick,

  /// SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4
  flightStick,

  /// SDL_JOYSTICK_TYPE_DANCE_PAD = 5
  dancePad,

  /// SDL_JOYSTICK_TYPE_GUITAR = 6
  guitar,

  /// SDL_JOYSTICK_TYPE_DRUM_KIT = 7
  drumKit,

  /// SDL_JOYSTICK_TYPE_ARCADE_PAD = 8
  arcadePad,

  /// SDL_JOYSTICK_TYPE_THROTTLE = 9
  throttle,
}

/// An extension for converting Dart to C values.
extension JoystickTypeToInt on JoystickType {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case JoystickType.unknown:
        return SDL_JoystickType.SDL_JOYSTICK_TYPE_UNKNOWN;
      case JoystickType.gamecontroller:
        return SDL_JoystickType.SDL_JOYSTICK_TYPE_GAMECONTROLLER;
      case JoystickType.wheel:
        return SDL_JoystickType.SDL_JOYSTICK_TYPE_WHEEL;
      case JoystickType.arcadeStick:
        return SDL_JoystickType.SDL_JOYSTICK_TYPE_ARCADE_STICK;
      case JoystickType.flightStick:
        return SDL_JoystickType.SDL_JOYSTICK_TYPE_FLIGHT_STICK;
      case JoystickType.dancePad:
        return SDL_JoystickType.SDL_JOYSTICK_TYPE_DANCE_PAD;
      case JoystickType.guitar:
        return SDL_JoystickType.SDL_JOYSTICK_TYPE_GUITAR;
      case JoystickType.drumKit:
        return SDL_JoystickType.SDL_JOYSTICK_TYPE_DRUM_KIT;
      case JoystickType.arcadePad:
        return SDL_JoystickType.SDL_JOYSTICK_TYPE_ARCADE_PAD;
      case JoystickType.throttle:
        return SDL_JoystickType.SDL_JOYSTICK_TYPE_THROTTLE;
    }
  }
}

/// SDL_JoystickPowerLevel.
enum JoystickPowerLevel {
  /// SDL_JOYSTICK_POWER_UNKNOWN = -1
  unknown,

  /// SDL_JOYSTICK_POWER_EMPTY = 0
  empty,

  /// SDL_JOYSTICK_POWER_LOW = 1
  low,

  /// SDL_JOYSTICK_POWER_MEDIUM = 2
  medium,

  /// SDL_JOYSTICK_POWER_FULL = 3
  full,

  /// SDL_JOYSTICK_POWER_WIRED = 4
  wired,

  /// SDL_JOYSTICK_POWER_MAX = 5
  max,
}

/// An extension for converting Dart to C values.
extension JoystickPowerLevelToInt on JoystickPowerLevel {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case JoystickPowerLevel.unknown:
        return SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_UNKNOWN;
      case JoystickPowerLevel.empty:
        return SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_EMPTY;
      case JoystickPowerLevel.low:
        return SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_LOW;
      case JoystickPowerLevel.medium:
        return SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_MEDIUM;
      case JoystickPowerLevel.full:
        return SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_FULL;
      case JoystickPowerLevel.wired:
        return SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_WIRED;
      case JoystickPowerLevel.max:
        return SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_MAX;
    }
  }
}

/// SDL_SensorType.
enum SensorType {
  /// SDL_SENSOR_INVALID = -1
  invalid,

  /// SDL_SENSOR_UNKNOWN = 0
  unknown,

  /// SDL_SENSOR_ACCEL = 1
  accel,

  /// SDL_SENSOR_GYRO = 2
  gyro,
}

/// An extension for converting Dart to C values.
extension SensorTypeToInt on SensorType {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case SensorType.invalid:
        return SDL_SensorType.SDL_SENSOR_INVALID;
      case SensorType.unknown:
        return SDL_SensorType.SDL_SENSOR_UNKNOWN;
      case SensorType.accel:
        return SDL_SensorType.SDL_SENSOR_ACCEL;
      case SensorType.gyro:
        return SDL_SensorType.SDL_SENSOR_GYRO;
    }
  }
}

/// SDL_GameControllerType.
enum GameControllerType {
  /// SDL_CONTROLLER_TYPE_UNKNOWN = 0
  unknown,

  /// SDL_CONTROLLER_TYPE_XBOX360 = 1
  xbox360,

  /// SDL_CONTROLLER_TYPE_XBOXONE = 2
  xboxone,

  /// SDL_CONTROLLER_TYPE_PS3 = 3
  ps3,

  /// SDL_CONTROLLER_TYPE_PS4 = 4
  ps4,

  /// SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO = 5
  nintendoSwitchPro,

  /// SDL_CONTROLLER_TYPE_VIRTUAL = 6
  virtual,

  /// SDL_CONTROLLER_TYPE_PS5 = 7
  ps5,
}

/// An extension for converting Dart to C values.
extension GameControllerTypeToInt on GameControllerType {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case GameControllerType.unknown:
        return SDL_GameControllerType.SDL_CONTROLLER_TYPE_UNKNOWN;
      case GameControllerType.xbox360:
        return SDL_GameControllerType.SDL_CONTROLLER_TYPE_XBOX360;
      case GameControllerType.xboxone:
        return SDL_GameControllerType.SDL_CONTROLLER_TYPE_XBOXONE;
      case GameControllerType.ps3:
        return SDL_GameControllerType.SDL_CONTROLLER_TYPE_PS3;
      case GameControllerType.ps4:
        return SDL_GameControllerType.SDL_CONTROLLER_TYPE_PS4;
      case GameControllerType.nintendoSwitchPro:
        return SDL_GameControllerType.SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO;
      case GameControllerType.virtual:
        return SDL_GameControllerType.SDL_CONTROLLER_TYPE_VIRTUAL;
      case GameControllerType.ps5:
        return SDL_GameControllerType.SDL_CONTROLLER_TYPE_PS5;
    }
  }
}

/// SDL_GameControllerBindType.
enum GameControllerBindType {
  /// SDL_CONTROLLER_BINDTYPE_NONE = 0
  none,

  /// SDL_CONTROLLER_BINDTYPE_BUTTON = 1
  button,

  /// SDL_CONTROLLER_BINDTYPE_AXIS = 2
  axis,

  /// SDL_CONTROLLER_BINDTYPE_HAT = 3
  hat,
}

/// An extension for converting Dart to C values.
extension GameControllerBindTypeToInt on GameControllerBindType {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case GameControllerBindType.none:
        return SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_NONE;
      case GameControllerBindType.button:
        return SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_BUTTON;
      case GameControllerBindType.axis:
        return SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_AXIS;
      case GameControllerBindType.hat:
        return SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_HAT;
    }
  }
}

/// SDL_GameControllerAxis.
enum GameControllerAxis {
  /// SDL_CONTROLLER_AXIS_INVALID = -1
  invalid,

  /// SDL_CONTROLLER_AXIS_LEFTX = 0
  leftx,

  /// SDL_CONTROLLER_AXIS_LEFTY = 1
  lefty,

  /// SDL_CONTROLLER_AXIS_RIGHTX = 2
  rightx,

  /// SDL_CONTROLLER_AXIS_RIGHTY = 3
  righty,

  /// SDL_CONTROLLER_AXIS_TRIGGERLEFT = 4
  triggerleft,

  /// SDL_CONTROLLER_AXIS_TRIGGERRIGHT = 5
  triggerright,

  /// SDL_CONTROLLER_AXIS_MAX = 6
  max,
}

/// An extension for converting Dart to C values.
extension GameControllerAxisToInt on GameControllerAxis {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case GameControllerAxis.invalid:
        return SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_INVALID;
      case GameControllerAxis.leftx:
        return SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_LEFTX;
      case GameControllerAxis.lefty:
        return SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_LEFTY;
      case GameControllerAxis.rightx:
        return SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_RIGHTX;
      case GameControllerAxis.righty:
        return SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_RIGHTY;
      case GameControllerAxis.triggerleft:
        return SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_TRIGGERLEFT;
      case GameControllerAxis.triggerright:
        return SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_TRIGGERRIGHT;
      case GameControllerAxis.max:
        return SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_MAX;
    }
  }
}

/// SDL_GameControllerButton.
enum GameControllerButton {
  /// SDL_CONTROLLER_BUTTON_INVALID = -1
  invalid,

  /// SDL_CONTROLLER_BUTTON_A = 0
  a,

  /// SDL_CONTROLLER_BUTTON_B = 1
  b,

  /// SDL_CONTROLLER_BUTTON_X = 2
  x,

  /// SDL_CONTROLLER_BUTTON_Y = 3
  y,

  /// SDL_CONTROLLER_BUTTON_BACK = 4
  back,

  /// SDL_CONTROLLER_BUTTON_GUIDE = 5
  guide,

  /// SDL_CONTROLLER_BUTTON_START = 6
  start,

  /// SDL_CONTROLLER_BUTTON_LEFTSTICK = 7
  leftstick,

  /// SDL_CONTROLLER_BUTTON_RIGHTSTICK = 8
  rightstick,

  /// SDL_CONTROLLER_BUTTON_LEFTSHOULDER = 9
  leftshoulder,

  /// SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = 10
  rightshoulder,

  /// SDL_CONTROLLER_BUTTON_DPAD_UP = 11
  dpadUp,

  /// SDL_CONTROLLER_BUTTON_DPAD_DOWN = 12
  dpadDown,

  /// SDL_CONTROLLER_BUTTON_DPAD_LEFT = 13
  dpadLeft,

  /// SDL_CONTROLLER_BUTTON_DPAD_RIGHT = 14
  dpadRight,

  /// SDL_CONTROLLER_BUTTON_MISC1 = 15
  misc1,

  /// SDL_CONTROLLER_BUTTON_PADDLE1 = 16
  paddle1,

  /// SDL_CONTROLLER_BUTTON_PADDLE2 = 17
  paddle2,

  /// SDL_CONTROLLER_BUTTON_PADDLE3 = 18
  paddle3,

  /// SDL_CONTROLLER_BUTTON_PADDLE4 = 19
  paddle4,

  /// SDL_CONTROLLER_BUTTON_TOUCHPAD = 20
  touchpad,

  /// SDL_CONTROLLER_BUTTON_MAX = 21
  max,
}

/// An extension for converting Dart to C values.
extension GameControllerButtonToInt on GameControllerButton {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case GameControllerButton.invalid:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_INVALID;
      case GameControllerButton.a:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_A;
      case GameControllerButton.b:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_B;
      case GameControllerButton.x:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_X;
      case GameControllerButton.y:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_Y;
      case GameControllerButton.back:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_BACK;
      case GameControllerButton.guide:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_GUIDE;
      case GameControllerButton.start:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_START;
      case GameControllerButton.leftstick:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_LEFTSTICK;
      case GameControllerButton.rightstick:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_RIGHTSTICK;
      case GameControllerButton.leftshoulder:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_LEFTSHOULDER;
      case GameControllerButton.rightshoulder:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_RIGHTSHOULDER;
      case GameControllerButton.dpadUp:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_UP;
      case GameControllerButton.dpadDown:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_DOWN;
      case GameControllerButton.dpadLeft:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_LEFT;
      case GameControllerButton.dpadRight:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_RIGHT;
      case GameControllerButton.misc1:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_MISC1;
      case GameControllerButton.paddle1:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE1;
      case GameControllerButton.paddle2:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE2;
      case GameControllerButton.paddle3:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE3;
      case GameControllerButton.paddle4:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE4;
      case GameControllerButton.touchpad:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_TOUCHPAD;
      case GameControllerButton.max:
        return SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_MAX;
    }
  }
}

/// SDL_TouchDeviceType.
enum TouchDeviceType {
  /// SDL_TOUCH_DEVICE_INVALID = -1
  invalid,

  /// SDL_TOUCH_DEVICE_DIRECT = 0
  direct,

  /// SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1
  indirectAbsolute,

  /// SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2
  indirectRelative,
}

/// An extension for converting Dart to C values.
extension TouchDeviceTypeToInt on TouchDeviceType {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case TouchDeviceType.invalid:
        return SDL_TouchDeviceType.SDL_TOUCH_DEVICE_INVALID;
      case TouchDeviceType.direct:
        return SDL_TouchDeviceType.SDL_TOUCH_DEVICE_DIRECT;
      case TouchDeviceType.indirectAbsolute:
        return SDL_TouchDeviceType.SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE;
      case TouchDeviceType.indirectRelative:
        return SDL_TouchDeviceType.SDL_TOUCH_DEVICE_INDIRECT_RELATIVE;
    }
  }
}

/// SDL_EventType.
enum EventType {
  /// SDL_FIRSTEVENT = 0
  firstevent,

  /// SDL_QUIT = 256
  quit,

  /// SDL_APP_TERMINATING = 257
  appTerminating,

  /// SDL_APP_LOWMEMORY = 258
  appLowmemory,

  /// SDL_APP_WILLENTERBACKGROUND = 259
  appWillenterbackground,

  /// SDL_APP_DIDENTERBACKGROUND = 260
  appDidenterbackground,

  /// SDL_APP_WILLENTERFOREGROUND = 261
  appWillenterforeground,

  /// SDL_APP_DIDENTERFOREGROUND = 262
  appDidenterforeground,

  /// SDL_LOCALECHANGED = 263
  localechanged,

  /// SDL_DISPLAYEVENT = 336
  displayevent,

  /// SDL_WINDOWEVENT = 512
  windowevent,

  /// SDL_SYSWMEVENT = 513
  syswmevent,

  /// SDL_KEYDOWN = 768
  keydown,

  /// SDL_KEYUP = 769
  keyup,

  /// SDL_TEXTEDITING = 770
  textediting,

  /// SDL_TEXTINPUT = 771
  textinput,

  /// SDL_KEYMAPCHANGED = 772
  keymapchanged,

  /// SDL_MOUSEMOTION = 1024
  mousemotion,

  /// SDL_MOUSEBUTTONDOWN = 1025
  mousebuttondown,

  /// SDL_MOUSEBUTTONUP = 1026
  mousebuttonup,

  /// SDL_MOUSEWHEEL = 1027
  mousewheel,

  /// SDL_JOYAXISMOTION = 1536
  joyaxismotion,

  /// SDL_JOYBALLMOTION = 1537
  joyballmotion,

  /// SDL_JOYHATMOTION = 1538
  joyhatmotion,

  /// SDL_JOYBUTTONDOWN = 1539
  joybuttondown,

  /// SDL_JOYBUTTONUP = 1540
  joybuttonup,

  /// SDL_JOYDEVICEADDED = 1541
  joydeviceadded,

  /// SDL_JOYDEVICEREMOVED = 1542
  joydeviceremoved,

  /// SDL_CONTROLLERAXISMOTION = 1616
  controlleraxismotion,

  /// SDL_CONTROLLERBUTTONDOWN = 1617
  controllerbuttondown,

  /// SDL_CONTROLLERBUTTONUP = 1618
  controllerbuttonup,

  /// SDL_CONTROLLERDEVICEADDED = 1619
  controllerdeviceadded,

  /// SDL_CONTROLLERDEVICEREMOVED = 1620
  controllerdeviceremoved,

  /// SDL_CONTROLLERDEVICEREMAPPED = 1621
  controllerdeviceremapped,

  /// SDL_CONTROLLERTOUCHPADDOWN = 1622
  controllertouchpaddown,

  /// SDL_CONTROLLERTOUCHPADMOTION = 1623
  controllertouchpadmotion,

  /// SDL_CONTROLLERTOUCHPADUP = 1624
  controllertouchpadup,

  /// SDL_CONTROLLERSENSORUPDATE = 1625
  controllersensorupdate,

  /// SDL_FINGERDOWN = 1792
  fingerdown,

  /// SDL_FINGERUP = 1793
  fingerup,

  /// SDL_FINGERMOTION = 1794
  fingermotion,

  /// SDL_DOLLARGESTURE = 2048
  dollargesture,

  /// SDL_DOLLARRECORD = 2049
  dollarrecord,

  /// SDL_MULTIGESTURE = 2050
  multigesture,

  /// SDL_CLIPBOARDUPDATE = 2304
  clipboardupdate,

  /// SDL_DROPFILE = 4096
  dropfile,

  /// SDL_DROPTEXT = 4097
  droptext,

  /// SDL_DROPBEGIN = 4098
  dropbegin,

  /// SDL_DROPCOMPLETE = 4099
  dropcomplete,

  /// SDL_AUDIODEVICEADDED = 4352
  audiodeviceadded,

  /// SDL_AUDIODEVICEREMOVED = 4353
  audiodeviceremoved,

  /// SDL_SENSORUPDATE = 4608
  sensorupdate,

  /// SDL_RENDER_TARGETS_RESET = 8192
  renderTargetsReset,

  /// SDL_RENDER_DEVICE_RESET = 8193
  renderDeviceReset,

  /// SDL_USEREVENT = 32768
  userevent,

  /// SDL_LASTEVENT = 65535
  lastevent,
}

/// An extension for converting Dart to C values.
extension EventTypeToInt on EventType {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case EventType.firstevent:
        return SDL_EventType.SDL_FIRSTEVENT;
      case EventType.quit:
        return SDL_EventType.SDL_QUIT;
      case EventType.appTerminating:
        return SDL_EventType.SDL_APP_TERMINATING;
      case EventType.appLowmemory:
        return SDL_EventType.SDL_APP_LOWMEMORY;
      case EventType.appWillenterbackground:
        return SDL_EventType.SDL_APP_WILLENTERBACKGROUND;
      case EventType.appDidenterbackground:
        return SDL_EventType.SDL_APP_DIDENTERBACKGROUND;
      case EventType.appWillenterforeground:
        return SDL_EventType.SDL_APP_WILLENTERFOREGROUND;
      case EventType.appDidenterforeground:
        return SDL_EventType.SDL_APP_DIDENTERFOREGROUND;
      case EventType.localechanged:
        return SDL_EventType.SDL_LOCALECHANGED;
      case EventType.displayevent:
        return SDL_EventType.SDL_DISPLAYEVENT;
      case EventType.windowevent:
        return SDL_EventType.SDL_WINDOWEVENT;
      case EventType.syswmevent:
        return SDL_EventType.SDL_SYSWMEVENT;
      case EventType.keydown:
        return SDL_EventType.SDL_KEYDOWN;
      case EventType.keyup:
        return SDL_EventType.SDL_KEYUP;
      case EventType.textediting:
        return SDL_EventType.SDL_TEXTEDITING;
      case EventType.textinput:
        return SDL_EventType.SDL_TEXTINPUT;
      case EventType.keymapchanged:
        return SDL_EventType.SDL_KEYMAPCHANGED;
      case EventType.mousemotion:
        return SDL_EventType.SDL_MOUSEMOTION;
      case EventType.mousebuttondown:
        return SDL_EventType.SDL_MOUSEBUTTONDOWN;
      case EventType.mousebuttonup:
        return SDL_EventType.SDL_MOUSEBUTTONUP;
      case EventType.mousewheel:
        return SDL_EventType.SDL_MOUSEWHEEL;
      case EventType.joyaxismotion:
        return SDL_EventType.SDL_JOYAXISMOTION;
      case EventType.joyballmotion:
        return SDL_EventType.SDL_JOYBALLMOTION;
      case EventType.joyhatmotion:
        return SDL_EventType.SDL_JOYHATMOTION;
      case EventType.joybuttondown:
        return SDL_EventType.SDL_JOYBUTTONDOWN;
      case EventType.joybuttonup:
        return SDL_EventType.SDL_JOYBUTTONUP;
      case EventType.joydeviceadded:
        return SDL_EventType.SDL_JOYDEVICEADDED;
      case EventType.joydeviceremoved:
        return SDL_EventType.SDL_JOYDEVICEREMOVED;
      case EventType.controlleraxismotion:
        return SDL_EventType.SDL_CONTROLLERAXISMOTION;
      case EventType.controllerbuttondown:
        return SDL_EventType.SDL_CONTROLLERBUTTONDOWN;
      case EventType.controllerbuttonup:
        return SDL_EventType.SDL_CONTROLLERBUTTONUP;
      case EventType.controllerdeviceadded:
        return SDL_EventType.SDL_CONTROLLERDEVICEADDED;
      case EventType.controllerdeviceremoved:
        return SDL_EventType.SDL_CONTROLLERDEVICEREMOVED;
      case EventType.controllerdeviceremapped:
        return SDL_EventType.SDL_CONTROLLERDEVICEREMAPPED;
      case EventType.controllertouchpaddown:
        return SDL_EventType.SDL_CONTROLLERTOUCHPADDOWN;
      case EventType.controllertouchpadmotion:
        return SDL_EventType.SDL_CONTROLLERTOUCHPADMOTION;
      case EventType.controllertouchpadup:
        return SDL_EventType.SDL_CONTROLLERTOUCHPADUP;
      case EventType.controllersensorupdate:
        return SDL_EventType.SDL_CONTROLLERSENSORUPDATE;
      case EventType.fingerdown:
        return SDL_EventType.SDL_FINGERDOWN;
      case EventType.fingerup:
        return SDL_EventType.SDL_FINGERUP;
      case EventType.fingermotion:
        return SDL_EventType.SDL_FINGERMOTION;
      case EventType.dollargesture:
        return SDL_EventType.SDL_DOLLARGESTURE;
      case EventType.dollarrecord:
        return SDL_EventType.SDL_DOLLARRECORD;
      case EventType.multigesture:
        return SDL_EventType.SDL_MULTIGESTURE;
      case EventType.clipboardupdate:
        return SDL_EventType.SDL_CLIPBOARDUPDATE;
      case EventType.dropfile:
        return SDL_EventType.SDL_DROPFILE;
      case EventType.droptext:
        return SDL_EventType.SDL_DROPTEXT;
      case EventType.dropbegin:
        return SDL_EventType.SDL_DROPBEGIN;
      case EventType.dropcomplete:
        return SDL_EventType.SDL_DROPCOMPLETE;
      case EventType.audiodeviceadded:
        return SDL_EventType.SDL_AUDIODEVICEADDED;
      case EventType.audiodeviceremoved:
        return SDL_EventType.SDL_AUDIODEVICEREMOVED;
      case EventType.sensorupdate:
        return SDL_EventType.SDL_SENSORUPDATE;
      case EventType.renderTargetsReset:
        return SDL_EventType.SDL_RENDER_TARGETS_RESET;
      case EventType.renderDeviceReset:
        return SDL_EventType.SDL_RENDER_DEVICE_RESET;
      case EventType.userevent:
        return SDL_EventType.SDL_USEREVENT;
      case EventType.lastevent:
        return SDL_EventType.SDL_LASTEVENT;
    }
  }
}

/// SDL_eventaction.
enum EventAction {
  /// SDL_ADDEVENT = 0
  addevent,

  /// SDL_PEEKEVENT = 1
  peekevent,

  /// SDL_GETEVENT = 2
  getevent,
}

/// An extension for converting Dart to C values.
extension EventActionToInt on EventAction {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case EventAction.addevent:
        return SDL_eventaction.SDL_ADDEVENT;
      case EventAction.peekevent:
        return SDL_eventaction.SDL_PEEKEVENT;
      case EventAction.getevent:
        return SDL_eventaction.SDL_GETEVENT;
    }
  }
}

/// SDL_HintPriority.
enum HintPriority {
  /// SDL_HINT_DEFAULT = 0
  default_,

  /// SDL_HINT_NORMAL = 1
  normal,

  /// SDL_HINT_OVERRIDE = 2
  override,
}

/// An extension for converting Dart to C values.
extension HintPriorityToInt on HintPriority {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case HintPriority.default_:
        return SDL_HintPriority.SDL_HINT_DEFAULT;
      case HintPriority.normal:
        return SDL_HintPriority.SDL_HINT_NORMAL;
      case HintPriority.override:
        return SDL_HintPriority.SDL_HINT_OVERRIDE;
    }
  }
}

/// SDL_LogCategory.
enum LogCategory {
  /// SDL_LOG_CATEGORY_APPLICATION = 0
  application,

  /// SDL_LOG_CATEGORY_ERROR = 1
  error,

  /// SDL_LOG_CATEGORY_ASSERT = 2
  assert_,

  /// SDL_LOG_CATEGORY_SYSTEM = 3
  system,

  /// SDL_LOG_CATEGORY_AUDIO = 4
  audio,

  /// SDL_LOG_CATEGORY_VIDEO = 5
  video,

  /// SDL_LOG_CATEGORY_RENDER = 6
  render,

  /// SDL_LOG_CATEGORY_INPUT = 7
  input,

  /// SDL_LOG_CATEGORY_TEST = 8
  test,

  /// SDL_LOG_CATEGORY_RESERVED1 = 9
  reserved1,

  /// SDL_LOG_CATEGORY_RESERVED2 = 10
  reserved2,

  /// SDL_LOG_CATEGORY_RESERVED3 = 11
  reserved3,

  /// SDL_LOG_CATEGORY_RESERVED4 = 12
  reserved4,

  /// SDL_LOG_CATEGORY_RESERVED5 = 13
  reserved5,

  /// SDL_LOG_CATEGORY_RESERVED6 = 14
  reserved6,

  /// SDL_LOG_CATEGORY_RESERVED7 = 15
  reserved7,

  /// SDL_LOG_CATEGORY_RESERVED8 = 16
  reserved8,

  /// SDL_LOG_CATEGORY_RESERVED9 = 17
  reserved9,

  /// SDL_LOG_CATEGORY_RESERVED10 = 18
  reserved10,

  /// SDL_LOG_CATEGORY_CUSTOM = 19
  custom,
}

/// An extension for converting Dart to C values.
extension LogCategoryToInt on LogCategory {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case LogCategory.application:
        return SDL_LogCategory.SDL_LOG_CATEGORY_APPLICATION;
      case LogCategory.error:
        return SDL_LogCategory.SDL_LOG_CATEGORY_ERROR;
      case LogCategory.assert_:
        return SDL_LogCategory.SDL_LOG_CATEGORY_ASSERT;
      case LogCategory.system:
        return SDL_LogCategory.SDL_LOG_CATEGORY_SYSTEM;
      case LogCategory.audio:
        return SDL_LogCategory.SDL_LOG_CATEGORY_AUDIO;
      case LogCategory.video:
        return SDL_LogCategory.SDL_LOG_CATEGORY_VIDEO;
      case LogCategory.render:
        return SDL_LogCategory.SDL_LOG_CATEGORY_RENDER;
      case LogCategory.input:
        return SDL_LogCategory.SDL_LOG_CATEGORY_INPUT;
      case LogCategory.test:
        return SDL_LogCategory.SDL_LOG_CATEGORY_TEST;
      case LogCategory.reserved1:
        return SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED1;
      case LogCategory.reserved2:
        return SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED2;
      case LogCategory.reserved3:
        return SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED3;
      case LogCategory.reserved4:
        return SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED4;
      case LogCategory.reserved5:
        return SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED5;
      case LogCategory.reserved6:
        return SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED6;
      case LogCategory.reserved7:
        return SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED7;
      case LogCategory.reserved8:
        return SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED8;
      case LogCategory.reserved9:
        return SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED9;
      case LogCategory.reserved10:
        return SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED10;
      case LogCategory.custom:
        return SDL_LogCategory.SDL_LOG_CATEGORY_CUSTOM;
    }
  }
}

/// SDL_LogPriority.
enum LogPriority {
  /// SDL_LOG_PRIORITY_VERBOSE = 1
  verbose,

  /// SDL_LOG_PRIORITY_DEBUG = 2
  debug,

  /// SDL_LOG_PRIORITY_INFO = 3
  info,

  /// SDL_LOG_PRIORITY_WARN = 4
  warn,

  /// SDL_LOG_PRIORITY_ERROR = 5
  error,

  /// SDL_LOG_PRIORITY_CRITICAL = 6
  critical,

  /// SDL_NUM_LOG_PRIORITIES = 7
  numLogPriorities,
}

/// An extension for converting Dart to C values.
extension LogPriorityToInt on LogPriority {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case LogPriority.verbose:
        return SDL_LogPriority.SDL_LOG_PRIORITY_VERBOSE;
      case LogPriority.debug:
        return SDL_LogPriority.SDL_LOG_PRIORITY_DEBUG;
      case LogPriority.info:
        return SDL_LogPriority.SDL_LOG_PRIORITY_INFO;
      case LogPriority.warn:
        return SDL_LogPriority.SDL_LOG_PRIORITY_WARN;
      case LogPriority.error:
        return SDL_LogPriority.SDL_LOG_PRIORITY_ERROR;
      case LogPriority.critical:
        return SDL_LogPriority.SDL_LOG_PRIORITY_CRITICAL;
      case LogPriority.numLogPriorities:
        return SDL_LogPriority.SDL_NUM_LOG_PRIORITIES;
    }
  }
}

/// SDL_MessageBoxFlags.
enum MessageBoxFlags {
  /// SDL_MESSAGEBOX_ERROR = 16
  error,

  /// SDL_MESSAGEBOX_WARNING = 32
  warning,

  /// SDL_MESSAGEBOX_INFORMATION = 64
  information,

  /// SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = 128
  buttonsLeftToRight,

  /// SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = 256
  buttonsRightToLeft,
}

/// An extension for converting Dart to C values.
extension MessageBoxFlagsToInt on MessageBoxFlags {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case MessageBoxFlags.error:
        return SDL_MessageBoxFlags.SDL_MESSAGEBOX_ERROR;
      case MessageBoxFlags.warning:
        return SDL_MessageBoxFlags.SDL_MESSAGEBOX_WARNING;
      case MessageBoxFlags.information:
        return SDL_MessageBoxFlags.SDL_MESSAGEBOX_INFORMATION;
      case MessageBoxFlags.buttonsLeftToRight:
        return SDL_MessageBoxFlags.SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT;
      case MessageBoxFlags.buttonsRightToLeft:
        return SDL_MessageBoxFlags.SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT;
    }
  }
}

/// SDL_MessageBoxButtonFlags.
enum MessageBoxButtonFlags {
  /// SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 1
  returnkeyDefault,

  /// SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 2
  escapekeyDefault,
}

/// An extension for converting Dart to C values.
extension MessageBoxButtonFlagsToInt on MessageBoxButtonFlags {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case MessageBoxButtonFlags.returnkeyDefault:
        return SDL_MessageBoxButtonFlags
            .SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT;
      case MessageBoxButtonFlags.escapekeyDefault:
        return SDL_MessageBoxButtonFlags
            .SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT;
    }
  }
}

/// SDL_MessageBoxColorType.
enum MessageBoxColorType {
  /// SDL_MESSAGEBOX_COLOR_BACKGROUND = 0
  background,

  /// SDL_MESSAGEBOX_COLOR_TEXT = 1
  text,

  /// SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = 2
  buttonBorder,

  /// SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3
  buttonBackground,

  /// SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = 4
  buttonSelected,

  /// SDL_MESSAGEBOX_COLOR_MAX = 5
  max,
}

/// An extension for converting Dart to C values.
extension MessageBoxColorTypeToInt on MessageBoxColorType {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case MessageBoxColorType.background:
        return SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_BACKGROUND;
      case MessageBoxColorType.text:
        return SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_TEXT;
      case MessageBoxColorType.buttonBorder:
        return SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_BUTTON_BORDER;
      case MessageBoxColorType.buttonBackground:
        return SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND;
      case MessageBoxColorType.buttonSelected:
        return SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED;
      case MessageBoxColorType.max:
        return SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_MAX;
    }
  }
}

/// SDL_PowerState.
enum PowerState {
  /// SDL_POWERSTATE_UNKNOWN = 0
  unknown,

  /// SDL_POWERSTATE_ON_BATTERY = 1
  onBattery,

  /// SDL_POWERSTATE_NO_BATTERY = 2
  noBattery,

  /// SDL_POWERSTATE_CHARGING = 3
  charging,

  /// SDL_POWERSTATE_CHARGED = 4
  charged,
}

/// An extension for converting Dart to C values.
extension PowerStateToInt on PowerState {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case PowerState.unknown:
        return SDL_PowerState.SDL_POWERSTATE_UNKNOWN;
      case PowerState.onBattery:
        return SDL_PowerState.SDL_POWERSTATE_ON_BATTERY;
      case PowerState.noBattery:
        return SDL_PowerState.SDL_POWERSTATE_NO_BATTERY;
      case PowerState.charging:
        return SDL_PowerState.SDL_POWERSTATE_CHARGING;
      case PowerState.charged:
        return SDL_PowerState.SDL_POWERSTATE_CHARGED;
    }
  }
}

/// SDL_RendererFlags.
enum RendererFlags {
  /// SDL_RENDERER_SOFTWARE = 1
  software,

  /// SDL_RENDERER_ACCELERATED = 2
  accelerated,

  /// SDL_RENDERER_PRESENTVSYNC = 4
  presentvsync,

  /// SDL_RENDERER_TARGETTEXTURE = 8
  targettexture,
}

/// An extension for converting Dart to C values.
extension RendererFlagsToInt on RendererFlags {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case RendererFlags.software:
        return SDL_RendererFlags.SDL_RENDERER_SOFTWARE;
      case RendererFlags.accelerated:
        return SDL_RendererFlags.SDL_RENDERER_ACCELERATED;
      case RendererFlags.presentvsync:
        return SDL_RendererFlags.SDL_RENDERER_PRESENTVSYNC;
      case RendererFlags.targettexture:
        return SDL_RendererFlags.SDL_RENDERER_TARGETTEXTURE;
    }
  }
}

/// SDL_ScaleMode.
enum ScaleMode {
  /// SDL_ScaleModeNearest = 0
  nearest,

  /// SDL_ScaleModeLinear = 1
  linear,

  /// SDL_ScaleModeBest = 2
  best,
}

/// An extension for converting Dart to C values.
extension ScaleModeToInt on ScaleMode {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case ScaleMode.nearest:
        return SDL_ScaleMode.SDL_ScaleModeNearest;
      case ScaleMode.linear:
        return SDL_ScaleMode.SDL_ScaleModeLinear;
      case ScaleMode.best:
        return SDL_ScaleMode.SDL_ScaleModeBest;
    }
  }
}

/// SDL_TextureAccess.
enum TextureAccess {
  /// SDL_TEXTUREACCESS_STATIC = 0
  static_,

  /// SDL_TEXTUREACCESS_STREAMING = 1
  streaming,

  /// SDL_TEXTUREACCESS_TARGET = 2
  target,
}

/// An extension for converting Dart to C values.
extension TextureAccessToInt on TextureAccess {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case TextureAccess.static_:
        return SDL_TextureAccess.SDL_TEXTUREACCESS_STATIC;
      case TextureAccess.streaming:
        return SDL_TextureAccess.SDL_TEXTUREACCESS_STREAMING;
      case TextureAccess.target:
        return SDL_TextureAccess.SDL_TEXTUREACCESS_TARGET;
    }
  }
}

/// SDL_TextureModulate.
enum TextureModulate {
  /// SDL_TEXTUREMODULATE_NONE = 0
  none,

  /// SDL_TEXTUREMODULATE_COLOR = 1
  color,

  /// SDL_TEXTUREMODULATE_ALPHA = 2
  alpha,
}

/// An extension for converting Dart to C values.
extension TextureModulateToInt on TextureModulate {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case TextureModulate.none:
        return SDL_TextureModulate.SDL_TEXTUREMODULATE_NONE;
      case TextureModulate.color:
        return SDL_TextureModulate.SDL_TEXTUREMODULATE_COLOR;
      case TextureModulate.alpha:
        return SDL_TextureModulate.SDL_TEXTUREMODULATE_ALPHA;
    }
  }
}

/// SDL_RendererFlip.
enum RendererFlip {
  /// SDL_FLIP_NONE = 0
  none,

  /// SDL_FLIP_HORIZONTAL = 1
  horizontal,

  /// SDL_FLIP_VERTICAL = 2
  vertical,
}

/// An extension for converting Dart to C values.
extension RendererFlipToInt on RendererFlip {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case RendererFlip.none:
        return SDL_RendererFlip.SDL_FLIP_NONE;
      case RendererFlip.horizontal:
        return SDL_RendererFlip.SDL_FLIP_HORIZONTAL;
      case RendererFlip.vertical:
        return SDL_RendererFlip.SDL_FLIP_VERTICAL;
    }
  }
}

/// An extension for converting integers to Dart values.
extension IntToC on int {
  /// Convert from a [SDL_bool] member.
  SdlBool toSdlBool() {
    switch (this) {
      case SDL_bool.SDL_FALSE:
        return SdlBool.false_;
      case SDL_bool.SDL_TRUE:
        return SdlBool.true_;
      default:
        throw SdlError(this, 'Unrecognised `SDL_bool` member.');
    }
  }

  /// Convert from a [SDL_AssertState] member.
  AssertState toAssertState() {
    switch (this) {
      case SDL_AssertState.SDL_ASSERTION_RETRY:
        return AssertState.assertionRetry;
      case SDL_AssertState.SDL_ASSERTION_BREAK:
        return AssertState.assertionBreak;
      case SDL_AssertState.SDL_ASSERTION_ABORT:
        return AssertState.assertionAbort;
      case SDL_AssertState.SDL_ASSERTION_IGNORE:
        return AssertState.assertionIgnore;
      case SDL_AssertState.SDL_ASSERTION_ALWAYS_IGNORE:
        return AssertState.assertionAlwaysIgnore;
      default:
        throw SdlError(this, 'Unrecognised `SDL_AssertState` member.');
    }
  }

  /// Convert from a [SDL_errorcode] member.
  ErrorCode toErrorCode() {
    switch (this) {
      case SDL_errorcode.SDL_ENOMEM:
        return ErrorCode.enomem;
      case SDL_errorcode.SDL_EFREAD:
        return ErrorCode.efread;
      case SDL_errorcode.SDL_EFWRITE:
        return ErrorCode.efwrite;
      case SDL_errorcode.SDL_EFSEEK:
        return ErrorCode.efseek;
      case SDL_errorcode.SDL_UNSUPPORTED:
        return ErrorCode.unsupported;
      case SDL_errorcode.SDL_LASTERROR:
        return ErrorCode.lasterror;
      default:
        throw SdlError(this, 'Unrecognised `SDL_errorcode` member.');
    }
  }

  /// Convert from a [SDL_ThreadPriority] member.
  ThreadPriority toThreadPriority() {
    switch (this) {
      case SDL_ThreadPriority.SDL_THREAD_PRIORITY_LOW:
        return ThreadPriority.threadPriorityLow;
      case SDL_ThreadPriority.SDL_THREAD_PRIORITY_NORMAL:
        return ThreadPriority.threadPriorityNormal;
      case SDL_ThreadPriority.SDL_THREAD_PRIORITY_HIGH:
        return ThreadPriority.threadPriorityHigh;
      case SDL_ThreadPriority.SDL_THREAD_PRIORITY_TIME_CRITICAL:
        return ThreadPriority.threadPriorityTimeCritical;
      default:
        throw SdlError(this, 'Unrecognised `SDL_ThreadPriority` member.');
    }
  }

  /// Convert from a [SDL_AudioStatus] member.
  AudioStatus toAudioStatus() {
    switch (this) {
      case SDL_AudioStatus.SDL_AUDIO_STOPPED:
        return AudioStatus.stopped;
      case SDL_AudioStatus.SDL_AUDIO_PLAYING:
        return AudioStatus.playing;
      case SDL_AudioStatus.SDL_AUDIO_PAUSED:
        return AudioStatus.paused;
      default:
        throw SdlError(this, 'Unrecognised `SDL_AudioStatus` member.');
    }
  }

  /// Convert from a [SDL_PixelType] member.
  PixelType toPixelType() {
    switch (this) {
      case SDL_PixelType.SDL_PIXELTYPE_UNKNOWN:
        return PixelType.unknown;
      case SDL_PixelType.SDL_PIXELTYPE_INDEX1:
        return PixelType.index1;
      case SDL_PixelType.SDL_PIXELTYPE_INDEX4:
        return PixelType.index4;
      case SDL_PixelType.SDL_PIXELTYPE_INDEX8:
        return PixelType.index8;
      case SDL_PixelType.SDL_PIXELTYPE_PACKED8:
        return PixelType.packed8;
      case SDL_PixelType.SDL_PIXELTYPE_PACKED16:
        return PixelType.packed16;
      case SDL_PixelType.SDL_PIXELTYPE_PACKED32:
        return PixelType.packed32;
      case SDL_PixelType.SDL_PIXELTYPE_ARRAYU8:
        return PixelType.arrayu8;
      case SDL_PixelType.SDL_PIXELTYPE_ARRAYU16:
        return PixelType.arrayu16;
      case SDL_PixelType.SDL_PIXELTYPE_ARRAYU32:
        return PixelType.arrayu32;
      case SDL_PixelType.SDL_PIXELTYPE_ARRAYF16:
        return PixelType.arrayf16;
      case SDL_PixelType.SDL_PIXELTYPE_ARRAYF32:
        return PixelType.arrayf32;
      default:
        throw SdlError(this, 'Unrecognised `SDL_PixelType` member.');
    }
  }

  /// Convert from a [SDL_BitmapOrder] member.
  BitmapOrder toBitmapOrder() {
    switch (this) {
      case SDL_BitmapOrder.SDL_BITMAPORDER_NONE:
        return BitmapOrder.none;
      case SDL_BitmapOrder.SDL_BITMAPORDER_4321:
        return BitmapOrder.bitmapOrder4321;
      case SDL_BitmapOrder.SDL_BITMAPORDER_1234:
        return BitmapOrder.bitmapOrder1234;
      default:
        throw SdlError(this, 'Unrecognised `SDL_BitmapOrder` member.');
    }
  }

  /// Convert from a [SDL_PackedOrder] member.
  PackedOrder toPackedOrder() {
    switch (this) {
      case SDL_PackedOrder.SDL_PACKEDORDER_NONE:
        return PackedOrder.none;
      case SDL_PackedOrder.SDL_PACKEDORDER_XRGB:
        return PackedOrder.xrgb;
      case SDL_PackedOrder.SDL_PACKEDORDER_RGBX:
        return PackedOrder.rgbx;
      case SDL_PackedOrder.SDL_PACKEDORDER_ARGB:
        return PackedOrder.argb;
      case SDL_PackedOrder.SDL_PACKEDORDER_RGBA:
        return PackedOrder.rgba;
      case SDL_PackedOrder.SDL_PACKEDORDER_XBGR:
        return PackedOrder.xbgr;
      case SDL_PackedOrder.SDL_PACKEDORDER_BGRX:
        return PackedOrder.bgrx;
      case SDL_PackedOrder.SDL_PACKEDORDER_ABGR:
        return PackedOrder.abgr;
      case SDL_PackedOrder.SDL_PACKEDORDER_BGRA:
        return PackedOrder.bgra;
      default:
        throw SdlError(this, 'Unrecognised `SDL_PackedOrder` member.');
    }
  }

  /// Convert from a [SDL_ArrayOrder] member.
  ArrayOrder toArrayOrder() {
    switch (this) {
      case SDL_ArrayOrder.SDL_ARRAYORDER_NONE:
        return ArrayOrder.none;
      case SDL_ArrayOrder.SDL_ARRAYORDER_RGB:
        return ArrayOrder.rgb;
      case SDL_ArrayOrder.SDL_ARRAYORDER_RGBA:
        return ArrayOrder.rgba;
      case SDL_ArrayOrder.SDL_ARRAYORDER_ARGB:
        return ArrayOrder.argb;
      case SDL_ArrayOrder.SDL_ARRAYORDER_BGR:
        return ArrayOrder.bgr;
      case SDL_ArrayOrder.SDL_ARRAYORDER_BGRA:
        return ArrayOrder.bgra;
      case SDL_ArrayOrder.SDL_ARRAYORDER_ABGR:
        return ArrayOrder.abgr;
      default:
        throw SdlError(this, 'Unrecognised `SDL_ArrayOrder` member.');
    }
  }

  /// Convert from a [SDL_PackedLayout] member.
  PackedLayout toPackedLayout() {
    switch (this) {
      case SDL_PackedLayout.SDL_PACKEDLAYOUT_NONE:
        return PackedLayout.none;
      case SDL_PackedLayout.SDL_PACKEDLAYOUT_332:
        return PackedLayout.packedLayout332;
      case SDL_PackedLayout.SDL_PACKEDLAYOUT_4444:
        return PackedLayout.packedLayout4444;
      case SDL_PackedLayout.SDL_PACKEDLAYOUT_1555:
        return PackedLayout.packedLayout1555;
      case SDL_PackedLayout.SDL_PACKEDLAYOUT_5551:
        return PackedLayout.packedLayout5551;
      case SDL_PackedLayout.SDL_PACKEDLAYOUT_565:
        return PackedLayout.packedLayout565;
      case SDL_PackedLayout.SDL_PACKEDLAYOUT_8888:
        return PackedLayout.packedLayout8888;
      case SDL_PackedLayout.SDL_PACKEDLAYOUT_2101010:
        return PackedLayout.packedLayout2101010;
      case SDL_PackedLayout.SDL_PACKEDLAYOUT_1010102:
        return PackedLayout.packedLayout1010102;
      default:
        throw SdlError(this, 'Unrecognised `SDL_PackedLayout` member.');
    }
  }

  /// Convert from a [SDL_PixelFormatEnum] member.
  PixelFormat toPixelFormat() {
    switch (this) {
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_UNKNOWN:
        return PixelFormat.unknown;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX1LSB:
        return PixelFormat.index1lsb;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX1MSB:
        return PixelFormat.index1msb;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX4LSB:
        return PixelFormat.index4lsb;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX4MSB:
        return PixelFormat.index4msb;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX8:
        return PixelFormat.index8;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB332:
        return PixelFormat.rgb332;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_XRGB4444:
        return PixelFormat.xrgb4444;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_XBGR4444:
        return PixelFormat.xbgr4444;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_XRGB1555:
        return PixelFormat.xrgb1555;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_XBGR1555:
        return PixelFormat.xbgr1555;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB4444:
        return PixelFormat.argb4444;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBA4444:
        return PixelFormat.rgba4444;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_ABGR4444:
        return PixelFormat.abgr4444;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRA4444:
        return PixelFormat.bgra4444;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB1555:
        return PixelFormat.argb1555;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBA5551:
        return PixelFormat.rgba5551;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_ABGR1555:
        return PixelFormat.abgr1555;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRA5551:
        return PixelFormat.bgra5551;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB565:
        return PixelFormat.rgb565;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGR565:
        return PixelFormat.bgr565;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB24:
        return PixelFormat.rgb24;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGR24:
        return PixelFormat.bgr24;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_XRGB8888:
        return PixelFormat.xrgb8888;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBX8888:
        return PixelFormat.rgbx8888;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_XBGR8888:
        return PixelFormat.xbgr8888;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRX8888:
        return PixelFormat.bgrx8888;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB8888:
        return PixelFormat.argb8888;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBA8888:
        return PixelFormat.rgba8888;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_ABGR8888:
        return PixelFormat.abgr8888;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRA8888:
        return PixelFormat.bgra8888;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB2101010:
        return PixelFormat.argb2101010;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_YV12:
        return PixelFormat.yv12;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_IYUV:
        return PixelFormat.iyuv;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_YUY2:
        return PixelFormat.yuy2;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_UYVY:
        return PixelFormat.uyvy;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_YVYU:
        return PixelFormat.yvyu;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_NV12:
        return PixelFormat.nv12;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_NV21:
        return PixelFormat.nv21;
      case SDL_PixelFormatEnum.SDL_PIXELFORMAT_EXTERNAL_OES:
        return PixelFormat.externalOes;
      default:
        throw SdlError(this, 'Unrecognised `SDL_PixelFormatEnum` member.');
    }
  }

  /// Convert from a [SDL_BlendMode] member.
  BlendMode toBlendMode() {
    switch (this) {
      case SDL_BlendMode.SDL_BLENDMODE_NONE:
        return BlendMode.none;
      case SDL_BlendMode.SDL_BLENDMODE_BLEND:
        return BlendMode.blend;
      case SDL_BlendMode.SDL_BLENDMODE_ADD:
        return BlendMode.add;
      case SDL_BlendMode.SDL_BLENDMODE_MOD:
        return BlendMode.mod;
      case SDL_BlendMode.SDL_BLENDMODE_MUL:
        return BlendMode.mul;
      case SDL_BlendMode.SDL_BLENDMODE_INVALID:
        return BlendMode.invalid;
      default:
        throw SdlError(this, 'Unrecognised `SDL_BlendMode` member.');
    }
  }

  /// Convert from a [SDL_BlendOperation] member.
  BlendOperation toBlendOperation() {
    switch (this) {
      case SDL_BlendOperation.SDL_BLENDOPERATION_ADD:
        return BlendOperation.add;
      case SDL_BlendOperation.SDL_BLENDOPERATION_SUBTRACT:
        return BlendOperation.subtract;
      case SDL_BlendOperation.SDL_BLENDOPERATION_REV_SUBTRACT:
        return BlendOperation.revSubtract;
      case SDL_BlendOperation.SDL_BLENDOPERATION_MINIMUM:
        return BlendOperation.minimum;
      case SDL_BlendOperation.SDL_BLENDOPERATION_MAXIMUM:
        return BlendOperation.maximum;
      default:
        throw SdlError(this, 'Unrecognised `SDL_BlendOperation` member.');
    }
  }

  /// Convert from a [SDL_BlendFactor] member.
  BlendFactor toBlendFactor() {
    switch (this) {
      case SDL_BlendFactor.SDL_BLENDFACTOR_ZERO:
        return BlendFactor.zero;
      case SDL_BlendFactor.SDL_BLENDFACTOR_ONE:
        return BlendFactor.one;
      case SDL_BlendFactor.SDL_BLENDFACTOR_SRC_COLOR:
        return BlendFactor.srcColor;
      case SDL_BlendFactor.SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR:
        return BlendFactor.oneMinusSrcColor;
      case SDL_BlendFactor.SDL_BLENDFACTOR_SRC_ALPHA:
        return BlendFactor.srcAlpha;
      case SDL_BlendFactor.SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA:
        return BlendFactor.oneMinusSrcAlpha;
      case SDL_BlendFactor.SDL_BLENDFACTOR_DST_COLOR:
        return BlendFactor.dstColor;
      case SDL_BlendFactor.SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR:
        return BlendFactor.oneMinusDstColor;
      case SDL_BlendFactor.SDL_BLENDFACTOR_DST_ALPHA:
        return BlendFactor.dstAlpha;
      case SDL_BlendFactor.SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA:
        return BlendFactor.oneMinusDstAlpha;
      default:
        throw SdlError(this, 'Unrecognised `SDL_BlendFactor` member.');
    }
  }

  /// Convert from a [SDL_YUV_CONVERSION_MODE] member.
  YuvConversionMode toYuvConversionMode() {
    switch (this) {
      case SDL_YUV_CONVERSION_MODE.SDL_YUV_CONVERSION_JPEG:
        return YuvConversionMode.jpeg;
      case SDL_YUV_CONVERSION_MODE.SDL_YUV_CONVERSION_BT601:
        return YuvConversionMode.bt601;
      case SDL_YUV_CONVERSION_MODE.SDL_YUV_CONVERSION_BT709:
        return YuvConversionMode.bt709;
      case SDL_YUV_CONVERSION_MODE.SDL_YUV_CONVERSION_AUTOMATIC:
        return YuvConversionMode.automatic;
      default:
        throw SdlError(this, 'Unrecognised `SDL_YUV_CONVERSION_MODE` member.');
    }
  }

  /// Convert from a [SDL_WindowFlags] member.
  WindowFlags toWindowFlags() {
    switch (this) {
      case SDL_WindowFlags.SDL_WINDOW_FULLSCREEN:
        return WindowFlags.fullscreen;
      case SDL_WindowFlags.SDL_WINDOW_OPENGL:
        return WindowFlags.opengl;
      case SDL_WindowFlags.SDL_WINDOW_SHOWN:
        return WindowFlags.shown;
      case SDL_WindowFlags.SDL_WINDOW_HIDDEN:
        return WindowFlags.hidden;
      case SDL_WindowFlags.SDL_WINDOW_BORDERLESS:
        return WindowFlags.borderless;
      case SDL_WindowFlags.SDL_WINDOW_RESIZABLE:
        return WindowFlags.resizable;
      case SDL_WindowFlags.SDL_WINDOW_MINIMIZED:
        return WindowFlags.minimized;
      case SDL_WindowFlags.SDL_WINDOW_MAXIMIZED:
        return WindowFlags.maximized;
      case SDL_WindowFlags.SDL_WINDOW_INPUT_GRABBED:
        return WindowFlags.inputGrabbed;
      case SDL_WindowFlags.SDL_WINDOW_INPUT_FOCUS:
        return WindowFlags.inputFocus;
      case SDL_WindowFlags.SDL_WINDOW_MOUSE_FOCUS:
        return WindowFlags.mouseFocus;
      case SDL_WindowFlags.SDL_WINDOW_FULLSCREEN_DESKTOP:
        return WindowFlags.fullscreenDesktop;
      case SDL_WindowFlags.SDL_WINDOW_FOREIGN:
        return WindowFlags.foreign;
      case SDL_WindowFlags.SDL_WINDOW_ALLOW_HIGHDPI:
        return WindowFlags.allowHighdpi;
      case SDL_WindowFlags.SDL_WINDOW_MOUSE_CAPTURE:
        return WindowFlags.mouseCapture;
      case SDL_WindowFlags.SDL_WINDOW_ALWAYS_ON_TOP:
        return WindowFlags.alwaysOnTop;
      case SDL_WindowFlags.SDL_WINDOW_SKIP_TASKBAR:
        return WindowFlags.skipTaskbar;
      case SDL_WindowFlags.SDL_WINDOW_UTILITY:
        return WindowFlags.utility;
      case SDL_WindowFlags.SDL_WINDOW_TOOLTIP:
        return WindowFlags.tooltip;
      case SDL_WindowFlags.SDL_WINDOW_POPUP_MENU:
        return WindowFlags.popupMenu;
      case SDL_WindowFlags.SDL_WINDOW_VULKAN:
        return WindowFlags.vulkan;
      case SDL_WindowFlags.SDL_WINDOW_METAL:
        return WindowFlags.metal;
      default:
        throw SdlError(this, 'Unrecognised `SDL_WindowFlags` member.');
    }
  }

  /// Convert from a [SDL_WindowEventID] member.
  WindowEventID toWindowEventID() {
    switch (this) {
      case SDL_WindowEventID.SDL_WINDOWEVENT_NONE:
        return WindowEventID.none;
      case SDL_WindowEventID.SDL_WINDOWEVENT_SHOWN:
        return WindowEventID.shown;
      case SDL_WindowEventID.SDL_WINDOWEVENT_HIDDEN:
        return WindowEventID.hidden;
      case SDL_WindowEventID.SDL_WINDOWEVENT_EXPOSED:
        return WindowEventID.exposed;
      case SDL_WindowEventID.SDL_WINDOWEVENT_MOVED:
        return WindowEventID.moved;
      case SDL_WindowEventID.SDL_WINDOWEVENT_RESIZED:
        return WindowEventID.resized;
      case SDL_WindowEventID.SDL_WINDOWEVENT_SIZE_CHANGED:
        return WindowEventID.sizeChanged;
      case SDL_WindowEventID.SDL_WINDOWEVENT_MINIMIZED:
        return WindowEventID.minimized;
      case SDL_WindowEventID.SDL_WINDOWEVENT_MAXIMIZED:
        return WindowEventID.maximized;
      case SDL_WindowEventID.SDL_WINDOWEVENT_RESTORED:
        return WindowEventID.restored;
      case SDL_WindowEventID.SDL_WINDOWEVENT_ENTER:
        return WindowEventID.enter;
      case SDL_WindowEventID.SDL_WINDOWEVENT_LEAVE:
        return WindowEventID.leave;
      case SDL_WindowEventID.SDL_WINDOWEVENT_FOCUS_GAINED:
        return WindowEventID.focusGained;
      case SDL_WindowEventID.SDL_WINDOWEVENT_FOCUS_LOST:
        return WindowEventID.focusLost;
      case SDL_WindowEventID.SDL_WINDOWEVENT_CLOSE:
        return WindowEventID.close;
      case SDL_WindowEventID.SDL_WINDOWEVENT_TAKE_FOCUS:
        return WindowEventID.takeFocus;
      case SDL_WindowEventID.SDL_WINDOWEVENT_HIT_TEST:
        return WindowEventID.hitTest;
      default:
        throw SdlError(this, 'Unrecognised `SDL_WindowEventID` member.');
    }
  }

  /// Convert from a [SDL_DisplayEventID] member.
  DisplayEventID toDisplayEventID() {
    switch (this) {
      case SDL_DisplayEventID.SDL_DISPLAYEVENT_NONE:
        return DisplayEventID.none;
      case SDL_DisplayEventID.SDL_DISPLAYEVENT_ORIENTATION:
        return DisplayEventID.orientation;
      case SDL_DisplayEventID.SDL_DISPLAYEVENT_CONNECTED:
        return DisplayEventID.connected;
      case SDL_DisplayEventID.SDL_DISPLAYEVENT_DISCONNECTED:
        return DisplayEventID.disconnected;
      default:
        throw SdlError(this, 'Unrecognised `SDL_DisplayEventID` member.');
    }
  }

  /// Convert from a [SDL_DisplayOrientation] member.
  DisplayOrientation toDisplayOrientation() {
    switch (this) {
      case SDL_DisplayOrientation.SDL_ORIENTATION_UNKNOWN:
        return DisplayOrientation.unknown;
      case SDL_DisplayOrientation.SDL_ORIENTATION_LANDSCAPE:
        return DisplayOrientation.landscape;
      case SDL_DisplayOrientation.SDL_ORIENTATION_LANDSCAPE_FLIPPED:
        return DisplayOrientation.landscapeFlipped;
      case SDL_DisplayOrientation.SDL_ORIENTATION_PORTRAIT:
        return DisplayOrientation.portrait;
      case SDL_DisplayOrientation.SDL_ORIENTATION_PORTRAIT_FLIPPED:
        return DisplayOrientation.portraitFlipped;
      default:
        throw SdlError(this, 'Unrecognised `SDL_DisplayOrientation` member.');
    }
  }

  /// Convert from a [SDL_GLattr] member.
  GLattr toGLattr() {
    switch (this) {
      case SDL_GLattr.SDL_GL_RED_SIZE:
        return GLattr.redSize;
      case SDL_GLattr.SDL_GL_GREEN_SIZE:
        return GLattr.greenSize;
      case SDL_GLattr.SDL_GL_BLUE_SIZE:
        return GLattr.blueSize;
      case SDL_GLattr.SDL_GL_ALPHA_SIZE:
        return GLattr.alphaSize;
      case SDL_GLattr.SDL_GL_BUFFER_SIZE:
        return GLattr.bufferSize;
      case SDL_GLattr.SDL_GL_DOUBLEBUFFER:
        return GLattr.doublebuffer;
      case SDL_GLattr.SDL_GL_DEPTH_SIZE:
        return GLattr.depthSize;
      case SDL_GLattr.SDL_GL_STENCIL_SIZE:
        return GLattr.stencilSize;
      case SDL_GLattr.SDL_GL_ACCUM_RED_SIZE:
        return GLattr.accumRedSize;
      case SDL_GLattr.SDL_GL_ACCUM_GREEN_SIZE:
        return GLattr.accumGreenSize;
      case SDL_GLattr.SDL_GL_ACCUM_BLUE_SIZE:
        return GLattr.accumBlueSize;
      case SDL_GLattr.SDL_GL_ACCUM_ALPHA_SIZE:
        return GLattr.accumAlphaSize;
      case SDL_GLattr.SDL_GL_STEREO:
        return GLattr.stereo;
      case SDL_GLattr.SDL_GL_MULTISAMPLEBUFFERS:
        return GLattr.multisamplebuffers;
      case SDL_GLattr.SDL_GL_MULTISAMPLESAMPLES:
        return GLattr.multisamplesamples;
      case SDL_GLattr.SDL_GL_ACCELERATED_VISUAL:
        return GLattr.acceleratedVisual;
      case SDL_GLattr.SDL_GL_RETAINED_BACKING:
        return GLattr.retainedBacking;
      case SDL_GLattr.SDL_GL_CONTEXT_MAJOR_VERSION:
        return GLattr.contextMajorVersion;
      case SDL_GLattr.SDL_GL_CONTEXT_MINOR_VERSION:
        return GLattr.contextMinorVersion;
      case SDL_GLattr.SDL_GL_CONTEXT_EGL:
        return GLattr.contextEgl;
      case SDL_GLattr.SDL_GL_CONTEXT_FLAGS:
        return GLattr.contextFlags;
      case SDL_GLattr.SDL_GL_CONTEXT_PROFILE_MASK:
        return GLattr.contextProfileMask;
      case SDL_GLattr.SDL_GL_SHARE_WITH_CURRENT_CONTEXT:
        return GLattr.shareWithCurrentContext;
      case SDL_GLattr.SDL_GL_FRAMEBUFFER_SRGB_CAPABLE:
        return GLattr.framebufferSrgbCapable;
      case SDL_GLattr.SDL_GL_CONTEXT_RELEASE_BEHAVIOR:
        return GLattr.contextReleaseBehavior;
      case SDL_GLattr.SDL_GL_CONTEXT_RESET_NOTIFICATION:
        return GLattr.contextResetNotification;
      case SDL_GLattr.SDL_GL_CONTEXT_NO_ERROR:
        return GLattr.contextNoError;
      default:
        throw SdlError(this, 'Unrecognised `SDL_GLattr` member.');
    }
  }

  /// Convert from a [SDL_GLprofile] member.
  GLprofile toGLprofile() {
    switch (this) {
      case SDL_GLprofile.SDL_GL_CONTEXT_PROFILE_CORE:
        return GLprofile.core;
      case SDL_GLprofile.SDL_GL_CONTEXT_PROFILE_COMPATIBILITY:
        return GLprofile.compatibility;
      case SDL_GLprofile.SDL_GL_CONTEXT_PROFILE_ES:
        return GLprofile.es;
      default:
        throw SdlError(this, 'Unrecognised `SDL_GLprofile` member.');
    }
  }

  /// Convert from a [SDL_GLcontextFlag] member.
  GLcontextFlag toGLcontextFlag() {
    switch (this) {
      case SDL_GLcontextFlag.SDL_GL_CONTEXT_DEBUG_FLAG:
        return GLcontextFlag.glContextDebugFlag;
      case SDL_GLcontextFlag.SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG:
        return GLcontextFlag.glContextForwardCompatibleFlag;
      case SDL_GLcontextFlag.SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG:
        return GLcontextFlag.glContextRobustAccessFlag;
      case SDL_GLcontextFlag.SDL_GL_CONTEXT_RESET_ISOLATION_FLAG:
        return GLcontextFlag.glContextResetIsolationFlag;
      default:
        throw SdlError(this, 'Unrecognised `SDL_GLcontextFlag` member.');
    }
  }

  /// Convert from a [SDL_GLcontextReleaseFlag] member.
  GLcontextReleaseFlag toGLcontextReleaseFlag() {
    switch (this) {
      case SDL_GLcontextReleaseFlag.SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE:
        return GLcontextReleaseFlag.none;
      case SDL_GLcontextReleaseFlag.SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH:
        return GLcontextReleaseFlag.flush;
      default:
        throw SdlError(this, 'Unrecognised `SDL_GLcontextReleaseFlag` member.');
    }
  }

  /// Convert from a [SDL_GLContextResetNotification] member.
  GLContextResetNotification toGLContextResetNotification() {
    switch (this) {
      case SDL_GLContextResetNotification.SDL_GL_CONTEXT_RESET_NO_NOTIFICATION:
        return GLContextResetNotification.noNotification;
      case SDL_GLContextResetNotification.SDL_GL_CONTEXT_RESET_LOSE_CONTEXT:
        return GLContextResetNotification.loseContext;
      default:
        throw SdlError(
            this, 'Unrecognised `SDL_GLContextResetNotification` member.');
    }
  }

  /// Convert from a [SDL_HitTestResult] member.
  HitTestResult toHitTestResult() {
    switch (this) {
      case SDL_HitTestResult.SDL_HITTEST_NORMAL:
        return HitTestResult.normal;
      case SDL_HitTestResult.SDL_HITTEST_DRAGGABLE:
        return HitTestResult.draggable;
      case SDL_HitTestResult.SDL_HITTEST_RESIZE_TOPLEFT:
        return HitTestResult.resizeTopleft;
      case SDL_HitTestResult.SDL_HITTEST_RESIZE_TOP:
        return HitTestResult.resizeTop;
      case SDL_HitTestResult.SDL_HITTEST_RESIZE_TOPRIGHT:
        return HitTestResult.resizeTopright;
      case SDL_HitTestResult.SDL_HITTEST_RESIZE_RIGHT:
        return HitTestResult.resizeRight;
      case SDL_HitTestResult.SDL_HITTEST_RESIZE_BOTTOMRIGHT:
        return HitTestResult.resizeBottomright;
      case SDL_HitTestResult.SDL_HITTEST_RESIZE_BOTTOM:
        return HitTestResult.resizeBottom;
      case SDL_HitTestResult.SDL_HITTEST_RESIZE_BOTTOMLEFT:
        return HitTestResult.resizeBottomleft;
      case SDL_HitTestResult.SDL_HITTEST_RESIZE_LEFT:
        return HitTestResult.resizeLeft;
      default:
        throw SdlError(this, 'Unrecognised `SDL_HitTestResult` member.');
    }
  }

  /// Convert from a [SDL_SystemCursor] member.
  SystemCursor toSystemCursor() {
    switch (this) {
      case SDL_SystemCursor.SDL_SYSTEM_CURSOR_ARROW:
        return SystemCursor.arrow;
      case SDL_SystemCursor.SDL_SYSTEM_CURSOR_IBEAM:
        return SystemCursor.ibeam;
      case SDL_SystemCursor.SDL_SYSTEM_CURSOR_WAIT:
        return SystemCursor.wait;
      case SDL_SystemCursor.SDL_SYSTEM_CURSOR_CROSSHAIR:
        return SystemCursor.crosshair;
      case SDL_SystemCursor.SDL_SYSTEM_CURSOR_WAITARROW:
        return SystemCursor.waitarrow;
      case SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZENWSE:
        return SystemCursor.sizenwse;
      case SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZENESW:
        return SystemCursor.sizenesw;
      case SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZEWE:
        return SystemCursor.sizewe;
      case SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZENS:
        return SystemCursor.sizens;
      case SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZEALL:
        return SystemCursor.sizeall;
      case SDL_SystemCursor.SDL_SYSTEM_CURSOR_NO:
        return SystemCursor.no;
      case SDL_SystemCursor.SDL_SYSTEM_CURSOR_HAND:
        return SystemCursor.hand;
      case SDL_SystemCursor.SDL_NUM_SYSTEM_CURSORS:
        return SystemCursor.numSystemCursors;
      default:
        throw SdlError(this, 'Unrecognised `SDL_SystemCursor` member.');
    }
  }

  /// Convert from a [SDL_MouseWheelDirection] member.
  MouseWheelDirection toMouseWheelDirection() {
    switch (this) {
      case SDL_MouseWheelDirection.SDL_MOUSEWHEEL_NORMAL:
        return MouseWheelDirection.normal;
      case SDL_MouseWheelDirection.SDL_MOUSEWHEEL_FLIPPED:
        return MouseWheelDirection.flipped;
      default:
        throw SdlError(this, 'Unrecognised `SDL_MouseWheelDirection` member.');
    }
  }

  /// Convert from a [SDL_JoystickType] member.
  JoystickType toJoystickType() {
    switch (this) {
      case SDL_JoystickType.SDL_JOYSTICK_TYPE_UNKNOWN:
        return JoystickType.unknown;
      case SDL_JoystickType.SDL_JOYSTICK_TYPE_GAMECONTROLLER:
        return JoystickType.gamecontroller;
      case SDL_JoystickType.SDL_JOYSTICK_TYPE_WHEEL:
        return JoystickType.wheel;
      case SDL_JoystickType.SDL_JOYSTICK_TYPE_ARCADE_STICK:
        return JoystickType.arcadeStick;
      case SDL_JoystickType.SDL_JOYSTICK_TYPE_FLIGHT_STICK:
        return JoystickType.flightStick;
      case SDL_JoystickType.SDL_JOYSTICK_TYPE_DANCE_PAD:
        return JoystickType.dancePad;
      case SDL_JoystickType.SDL_JOYSTICK_TYPE_GUITAR:
        return JoystickType.guitar;
      case SDL_JoystickType.SDL_JOYSTICK_TYPE_DRUM_KIT:
        return JoystickType.drumKit;
      case SDL_JoystickType.SDL_JOYSTICK_TYPE_ARCADE_PAD:
        return JoystickType.arcadePad;
      case SDL_JoystickType.SDL_JOYSTICK_TYPE_THROTTLE:
        return JoystickType.throttle;
      default:
        throw SdlError(this, 'Unrecognised `SDL_JoystickType` member.');
    }
  }

  /// Convert from a [SDL_JoystickPowerLevel] member.
  JoystickPowerLevel toJoystickPowerLevel() {
    switch (this) {
      case SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_UNKNOWN:
        return JoystickPowerLevel.unknown;
      case SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_EMPTY:
        return JoystickPowerLevel.empty;
      case SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_LOW:
        return JoystickPowerLevel.low;
      case SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_MEDIUM:
        return JoystickPowerLevel.medium;
      case SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_FULL:
        return JoystickPowerLevel.full;
      case SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_WIRED:
        return JoystickPowerLevel.wired;
      case SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_MAX:
        return JoystickPowerLevel.max;
      default:
        throw SdlError(this, 'Unrecognised `SDL_JoystickPowerLevel` member.');
    }
  }

  /// Convert from a [SDL_SensorType] member.
  SensorType toSensorType() {
    switch (this) {
      case SDL_SensorType.SDL_SENSOR_INVALID:
        return SensorType.invalid;
      case SDL_SensorType.SDL_SENSOR_UNKNOWN:
        return SensorType.unknown;
      case SDL_SensorType.SDL_SENSOR_ACCEL:
        return SensorType.accel;
      case SDL_SensorType.SDL_SENSOR_GYRO:
        return SensorType.gyro;
      default:
        throw SdlError(this, 'Unrecognised `SDL_SensorType` member.');
    }
  }

  /// Convert from a [SDL_GameControllerType] member.
  GameControllerType toGameControllerType() {
    switch (this) {
      case SDL_GameControllerType.SDL_CONTROLLER_TYPE_UNKNOWN:
        return GameControllerType.unknown;
      case SDL_GameControllerType.SDL_CONTROLLER_TYPE_XBOX360:
        return GameControllerType.xbox360;
      case SDL_GameControllerType.SDL_CONTROLLER_TYPE_XBOXONE:
        return GameControllerType.xboxone;
      case SDL_GameControllerType.SDL_CONTROLLER_TYPE_PS3:
        return GameControllerType.ps3;
      case SDL_GameControllerType.SDL_CONTROLLER_TYPE_PS4:
        return GameControllerType.ps4;
      case SDL_GameControllerType.SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO:
        return GameControllerType.nintendoSwitchPro;
      case SDL_GameControllerType.SDL_CONTROLLER_TYPE_VIRTUAL:
        return GameControllerType.virtual;
      case SDL_GameControllerType.SDL_CONTROLLER_TYPE_PS5:
        return GameControllerType.ps5;
      default:
        throw SdlError(this, 'Unrecognised `SDL_GameControllerType` member.');
    }
  }

  /// Convert from a [SDL_GameControllerBindType] member.
  GameControllerBindType toGameControllerBindType() {
    switch (this) {
      case SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_NONE:
        return GameControllerBindType.none;
      case SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_BUTTON:
        return GameControllerBindType.button;
      case SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_AXIS:
        return GameControllerBindType.axis;
      case SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_HAT:
        return GameControllerBindType.hat;
      default:
        throw SdlError(
            this, 'Unrecognised `SDL_GameControllerBindType` member.');
    }
  }

  /// Convert from a [SDL_GameControllerAxis] member.
  GameControllerAxis toGameControllerAxis() {
    switch (this) {
      case SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_INVALID:
        return GameControllerAxis.invalid;
      case SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_LEFTX:
        return GameControllerAxis.leftx;
      case SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_LEFTY:
        return GameControllerAxis.lefty;
      case SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_RIGHTX:
        return GameControllerAxis.rightx;
      case SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_RIGHTY:
        return GameControllerAxis.righty;
      case SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_TRIGGERLEFT:
        return GameControllerAxis.triggerleft;
      case SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_TRIGGERRIGHT:
        return GameControllerAxis.triggerright;
      case SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_MAX:
        return GameControllerAxis.max;
      default:
        throw SdlError(this, 'Unrecognised `SDL_GameControllerAxis` member.');
    }
  }

  /// Convert from a [SDL_GameControllerButton] member.
  GameControllerButton toGameControllerButton() {
    switch (this) {
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_INVALID:
        return GameControllerButton.invalid;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_A:
        return GameControllerButton.a;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_B:
        return GameControllerButton.b;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_X:
        return GameControllerButton.x;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_Y:
        return GameControllerButton.y;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_BACK:
        return GameControllerButton.back;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_GUIDE:
        return GameControllerButton.guide;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_START:
        return GameControllerButton.start;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_LEFTSTICK:
        return GameControllerButton.leftstick;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_RIGHTSTICK:
        return GameControllerButton.rightstick;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_LEFTSHOULDER:
        return GameControllerButton.leftshoulder;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_RIGHTSHOULDER:
        return GameControllerButton.rightshoulder;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_UP:
        return GameControllerButton.dpadUp;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_DOWN:
        return GameControllerButton.dpadDown;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_LEFT:
        return GameControllerButton.dpadLeft;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_RIGHT:
        return GameControllerButton.dpadRight;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_MISC1:
        return GameControllerButton.misc1;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE1:
        return GameControllerButton.paddle1;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE2:
        return GameControllerButton.paddle2;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE3:
        return GameControllerButton.paddle3;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE4:
        return GameControllerButton.paddle4;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_TOUCHPAD:
        return GameControllerButton.touchpad;
      case SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_MAX:
        return GameControllerButton.max;
      default:
        throw SdlError(this, 'Unrecognised `SDL_GameControllerButton` member.');
    }
  }

  /// Convert from a [SDL_TouchDeviceType] member.
  TouchDeviceType toTouchDeviceType() {
    switch (this) {
      case SDL_TouchDeviceType.SDL_TOUCH_DEVICE_INVALID:
        return TouchDeviceType.invalid;
      case SDL_TouchDeviceType.SDL_TOUCH_DEVICE_DIRECT:
        return TouchDeviceType.direct;
      case SDL_TouchDeviceType.SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE:
        return TouchDeviceType.indirectAbsolute;
      case SDL_TouchDeviceType.SDL_TOUCH_DEVICE_INDIRECT_RELATIVE:
        return TouchDeviceType.indirectRelative;
      default:
        throw SdlError(this, 'Unrecognised `SDL_TouchDeviceType` member.');
    }
  }

  /// Convert from a [SDL_EventType] member.
  EventType toEventType() {
    switch (this) {
      case SDL_EventType.SDL_FIRSTEVENT:
        return EventType.firstevent;
      case SDL_EventType.SDL_QUIT:
        return EventType.quit;
      case SDL_EventType.SDL_APP_TERMINATING:
        return EventType.appTerminating;
      case SDL_EventType.SDL_APP_LOWMEMORY:
        return EventType.appLowmemory;
      case SDL_EventType.SDL_APP_WILLENTERBACKGROUND:
        return EventType.appWillenterbackground;
      case SDL_EventType.SDL_APP_DIDENTERBACKGROUND:
        return EventType.appDidenterbackground;
      case SDL_EventType.SDL_APP_WILLENTERFOREGROUND:
        return EventType.appWillenterforeground;
      case SDL_EventType.SDL_APP_DIDENTERFOREGROUND:
        return EventType.appDidenterforeground;
      case SDL_EventType.SDL_LOCALECHANGED:
        return EventType.localechanged;
      case SDL_EventType.SDL_DISPLAYEVENT:
        return EventType.displayevent;
      case SDL_EventType.SDL_WINDOWEVENT:
        return EventType.windowevent;
      case SDL_EventType.SDL_SYSWMEVENT:
        return EventType.syswmevent;
      case SDL_EventType.SDL_KEYDOWN:
        return EventType.keydown;
      case SDL_EventType.SDL_KEYUP:
        return EventType.keyup;
      case SDL_EventType.SDL_TEXTEDITING:
        return EventType.textediting;
      case SDL_EventType.SDL_TEXTINPUT:
        return EventType.textinput;
      case SDL_EventType.SDL_KEYMAPCHANGED:
        return EventType.keymapchanged;
      case SDL_EventType.SDL_MOUSEMOTION:
        return EventType.mousemotion;
      case SDL_EventType.SDL_MOUSEBUTTONDOWN:
        return EventType.mousebuttondown;
      case SDL_EventType.SDL_MOUSEBUTTONUP:
        return EventType.mousebuttonup;
      case SDL_EventType.SDL_MOUSEWHEEL:
        return EventType.mousewheel;
      case SDL_EventType.SDL_JOYAXISMOTION:
        return EventType.joyaxismotion;
      case SDL_EventType.SDL_JOYBALLMOTION:
        return EventType.joyballmotion;
      case SDL_EventType.SDL_JOYHATMOTION:
        return EventType.joyhatmotion;
      case SDL_EventType.SDL_JOYBUTTONDOWN:
        return EventType.joybuttondown;
      case SDL_EventType.SDL_JOYBUTTONUP:
        return EventType.joybuttonup;
      case SDL_EventType.SDL_JOYDEVICEADDED:
        return EventType.joydeviceadded;
      case SDL_EventType.SDL_JOYDEVICEREMOVED:
        return EventType.joydeviceremoved;
      case SDL_EventType.SDL_CONTROLLERAXISMOTION:
        return EventType.controlleraxismotion;
      case SDL_EventType.SDL_CONTROLLERBUTTONDOWN:
        return EventType.controllerbuttondown;
      case SDL_EventType.SDL_CONTROLLERBUTTONUP:
        return EventType.controllerbuttonup;
      case SDL_EventType.SDL_CONTROLLERDEVICEADDED:
        return EventType.controllerdeviceadded;
      case SDL_EventType.SDL_CONTROLLERDEVICEREMOVED:
        return EventType.controllerdeviceremoved;
      case SDL_EventType.SDL_CONTROLLERDEVICEREMAPPED:
        return EventType.controllerdeviceremapped;
      case SDL_EventType.SDL_CONTROLLERTOUCHPADDOWN:
        return EventType.controllertouchpaddown;
      case SDL_EventType.SDL_CONTROLLERTOUCHPADMOTION:
        return EventType.controllertouchpadmotion;
      case SDL_EventType.SDL_CONTROLLERTOUCHPADUP:
        return EventType.controllertouchpadup;
      case SDL_EventType.SDL_CONTROLLERSENSORUPDATE:
        return EventType.controllersensorupdate;
      case SDL_EventType.SDL_FINGERDOWN:
        return EventType.fingerdown;
      case SDL_EventType.SDL_FINGERUP:
        return EventType.fingerup;
      case SDL_EventType.SDL_FINGERMOTION:
        return EventType.fingermotion;
      case SDL_EventType.SDL_DOLLARGESTURE:
        return EventType.dollargesture;
      case SDL_EventType.SDL_DOLLARRECORD:
        return EventType.dollarrecord;
      case SDL_EventType.SDL_MULTIGESTURE:
        return EventType.multigesture;
      case SDL_EventType.SDL_CLIPBOARDUPDATE:
        return EventType.clipboardupdate;
      case SDL_EventType.SDL_DROPFILE:
        return EventType.dropfile;
      case SDL_EventType.SDL_DROPTEXT:
        return EventType.droptext;
      case SDL_EventType.SDL_DROPBEGIN:
        return EventType.dropbegin;
      case SDL_EventType.SDL_DROPCOMPLETE:
        return EventType.dropcomplete;
      case SDL_EventType.SDL_AUDIODEVICEADDED:
        return EventType.audiodeviceadded;
      case SDL_EventType.SDL_AUDIODEVICEREMOVED:
        return EventType.audiodeviceremoved;
      case SDL_EventType.SDL_SENSORUPDATE:
        return EventType.sensorupdate;
      case SDL_EventType.SDL_RENDER_TARGETS_RESET:
        return EventType.renderTargetsReset;
      case SDL_EventType.SDL_RENDER_DEVICE_RESET:
        return EventType.renderDeviceReset;
      case SDL_EventType.SDL_USEREVENT:
        return EventType.userevent;
      case SDL_EventType.SDL_LASTEVENT:
        return EventType.lastevent;
      default:
        throw SdlError(this, 'Unrecognised `SDL_EventType` member.');
    }
  }

  /// Convert from a [SDL_eventaction] member.
  EventAction toEventAction() {
    switch (this) {
      case SDL_eventaction.SDL_ADDEVENT:
        return EventAction.addevent;
      case SDL_eventaction.SDL_PEEKEVENT:
        return EventAction.peekevent;
      case SDL_eventaction.SDL_GETEVENT:
        return EventAction.getevent;
      default:
        throw SdlError(this, 'Unrecognised `SDL_eventaction` member.');
    }
  }

  /// Convert from a [SDL_HintPriority] member.
  HintPriority toHintPriority() {
    switch (this) {
      case SDL_HintPriority.SDL_HINT_DEFAULT:
        return HintPriority.default_;
      case SDL_HintPriority.SDL_HINT_NORMAL:
        return HintPriority.normal;
      case SDL_HintPriority.SDL_HINT_OVERRIDE:
        return HintPriority.override;
      default:
        throw SdlError(this, 'Unrecognised `SDL_HintPriority` member.');
    }
  }

  /// Convert from a [SDL_LogCategory] member.
  LogCategory toLogCategory() {
    switch (this) {
      case SDL_LogCategory.SDL_LOG_CATEGORY_APPLICATION:
        return LogCategory.application;
      case SDL_LogCategory.SDL_LOG_CATEGORY_ERROR:
        return LogCategory.error;
      case SDL_LogCategory.SDL_LOG_CATEGORY_ASSERT:
        return LogCategory.assert_;
      case SDL_LogCategory.SDL_LOG_CATEGORY_SYSTEM:
        return LogCategory.system;
      case SDL_LogCategory.SDL_LOG_CATEGORY_AUDIO:
        return LogCategory.audio;
      case SDL_LogCategory.SDL_LOG_CATEGORY_VIDEO:
        return LogCategory.video;
      case SDL_LogCategory.SDL_LOG_CATEGORY_RENDER:
        return LogCategory.render;
      case SDL_LogCategory.SDL_LOG_CATEGORY_INPUT:
        return LogCategory.input;
      case SDL_LogCategory.SDL_LOG_CATEGORY_TEST:
        return LogCategory.test;
      case SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED1:
        return LogCategory.reserved1;
      case SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED2:
        return LogCategory.reserved2;
      case SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED3:
        return LogCategory.reserved3;
      case SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED4:
        return LogCategory.reserved4;
      case SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED5:
        return LogCategory.reserved5;
      case SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED6:
        return LogCategory.reserved6;
      case SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED7:
        return LogCategory.reserved7;
      case SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED8:
        return LogCategory.reserved8;
      case SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED9:
        return LogCategory.reserved9;
      case SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED10:
        return LogCategory.reserved10;
      case SDL_LogCategory.SDL_LOG_CATEGORY_CUSTOM:
        return LogCategory.custom;
      default:
        throw SdlError(this, 'Unrecognised `SDL_LogCategory` member.');
    }
  }

  /// Convert from a [SDL_LogPriority] member.
  LogPriority toLogPriority() {
    switch (this) {
      case SDL_LogPriority.SDL_LOG_PRIORITY_VERBOSE:
        return LogPriority.verbose;
      case SDL_LogPriority.SDL_LOG_PRIORITY_DEBUG:
        return LogPriority.debug;
      case SDL_LogPriority.SDL_LOG_PRIORITY_INFO:
        return LogPriority.info;
      case SDL_LogPriority.SDL_LOG_PRIORITY_WARN:
        return LogPriority.warn;
      case SDL_LogPriority.SDL_LOG_PRIORITY_ERROR:
        return LogPriority.error;
      case SDL_LogPriority.SDL_LOG_PRIORITY_CRITICAL:
        return LogPriority.critical;
      case SDL_LogPriority.SDL_NUM_LOG_PRIORITIES:
        return LogPriority.numLogPriorities;
      default:
        throw SdlError(this, 'Unrecognised `SDL_LogPriority` member.');
    }
  }

  /// Convert from a [SDL_MessageBoxFlags] member.
  MessageBoxFlags toMessageBoxFlags() {
    switch (this) {
      case SDL_MessageBoxFlags.SDL_MESSAGEBOX_ERROR:
        return MessageBoxFlags.error;
      case SDL_MessageBoxFlags.SDL_MESSAGEBOX_WARNING:
        return MessageBoxFlags.warning;
      case SDL_MessageBoxFlags.SDL_MESSAGEBOX_INFORMATION:
        return MessageBoxFlags.information;
      case SDL_MessageBoxFlags.SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT:
        return MessageBoxFlags.buttonsLeftToRight;
      case SDL_MessageBoxFlags.SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT:
        return MessageBoxFlags.buttonsRightToLeft;
      default:
        throw SdlError(this, 'Unrecognised `SDL_MessageBoxFlags` member.');
    }
  }

  /// Convert from a [SDL_MessageBoxButtonFlags] member.
  MessageBoxButtonFlags toMessageBoxButtonFlags() {
    switch (this) {
      case SDL_MessageBoxButtonFlags.SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT:
        return MessageBoxButtonFlags.returnkeyDefault;
      case SDL_MessageBoxButtonFlags.SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT:
        return MessageBoxButtonFlags.escapekeyDefault;
      default:
        throw SdlError(
            this, 'Unrecognised `SDL_MessageBoxButtonFlags` member.');
    }
  }

  /// Convert from a [SDL_MessageBoxColorType] member.
  MessageBoxColorType toMessageBoxColorType() {
    switch (this) {
      case SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_BACKGROUND:
        return MessageBoxColorType.background;
      case SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_TEXT:
        return MessageBoxColorType.text;
      case SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_BUTTON_BORDER:
        return MessageBoxColorType.buttonBorder;
      case SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND:
        return MessageBoxColorType.buttonBackground;
      case SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED:
        return MessageBoxColorType.buttonSelected;
      case SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_MAX:
        return MessageBoxColorType.max;
      default:
        throw SdlError(this, 'Unrecognised `SDL_MessageBoxColorType` member.');
    }
  }

  /// Convert from a [SDL_PowerState] member.
  PowerState toPowerState() {
    switch (this) {
      case SDL_PowerState.SDL_POWERSTATE_UNKNOWN:
        return PowerState.unknown;
      case SDL_PowerState.SDL_POWERSTATE_ON_BATTERY:
        return PowerState.onBattery;
      case SDL_PowerState.SDL_POWERSTATE_NO_BATTERY:
        return PowerState.noBattery;
      case SDL_PowerState.SDL_POWERSTATE_CHARGING:
        return PowerState.charging;
      case SDL_PowerState.SDL_POWERSTATE_CHARGED:
        return PowerState.charged;
      default:
        throw SdlError(this, 'Unrecognised `SDL_PowerState` member.');
    }
  }

  /// Convert from a [SDL_RendererFlags] member.
  RendererFlags toRendererFlags() {
    switch (this) {
      case SDL_RendererFlags.SDL_RENDERER_SOFTWARE:
        return RendererFlags.software;
      case SDL_RendererFlags.SDL_RENDERER_ACCELERATED:
        return RendererFlags.accelerated;
      case SDL_RendererFlags.SDL_RENDERER_PRESENTVSYNC:
        return RendererFlags.presentvsync;
      case SDL_RendererFlags.SDL_RENDERER_TARGETTEXTURE:
        return RendererFlags.targettexture;
      default:
        throw SdlError(this, 'Unrecognised `SDL_RendererFlags` member.');
    }
  }

  /// Convert from a [SDL_ScaleMode] member.
  ScaleMode toScaleMode() {
    switch (this) {
      case SDL_ScaleMode.SDL_ScaleModeNearest:
        return ScaleMode.nearest;
      case SDL_ScaleMode.SDL_ScaleModeLinear:
        return ScaleMode.linear;
      case SDL_ScaleMode.SDL_ScaleModeBest:
        return ScaleMode.best;
      default:
        throw SdlError(this, 'Unrecognised `SDL_ScaleMode` member.');
    }
  }

  /// Convert from a [SDL_TextureAccess] member.
  TextureAccess toTextureAccess() {
    switch (this) {
      case SDL_TextureAccess.SDL_TEXTUREACCESS_STATIC:
        return TextureAccess.static_;
      case SDL_TextureAccess.SDL_TEXTUREACCESS_STREAMING:
        return TextureAccess.streaming;
      case SDL_TextureAccess.SDL_TEXTUREACCESS_TARGET:
        return TextureAccess.target;
      default:
        throw SdlError(this, 'Unrecognised `SDL_TextureAccess` member.');
    }
  }

  /// Convert from a [SDL_TextureModulate] member.
  TextureModulate toTextureModulate() {
    switch (this) {
      case SDL_TextureModulate.SDL_TEXTUREMODULATE_NONE:
        return TextureModulate.none;
      case SDL_TextureModulate.SDL_TEXTUREMODULATE_COLOR:
        return TextureModulate.color;
      case SDL_TextureModulate.SDL_TEXTUREMODULATE_ALPHA:
        return TextureModulate.alpha;
      default:
        throw SdlError(this, 'Unrecognised `SDL_TextureModulate` member.');
    }
  }

  /// Convert from a [SDL_RendererFlip] member.
  RendererFlip toRendererFlip() {
    switch (this) {
      case SDL_RendererFlip.SDL_FLIP_NONE:
        return RendererFlip.none;
      case SDL_RendererFlip.SDL_FLIP_HORIZONTAL:
        return RendererFlip.horizontal;
      case SDL_RendererFlip.SDL_FLIP_VERTICAL:
        return RendererFlip.vertical;
      default:
        throw SdlError(this, 'Unrecognised `SDL_RendererFlip` member.');
    }
  }
}
