/// Provides mouse-related events.
import 'dart:math';

import '../../dart_sdl.dart';
import '../enumerations.dart';
import '../error.dart';
import '../extensions.dart';
import '../sdl.dart';
import '../sdl_bindings.dart';
import 'base.dart';

/// Which mouse button was used.
enum MouseButton {
  /// [SDL_BUTTON_LEFT].
  left,

  /// [SDL_BUTTON_MIDDLE].
  middle,

  /// [SDL_BUTTON_RIGHT].
  right,

  /// [SDL_BUTTON_X1].
  x1,

  /// [SDL_BUTTON_X2].
  x2,
}

/// Add conversions to mouse structures.
extension MouseButtonPressedStateExtension on int {
  /// Convert to a mouse button.
  MouseButton toMouseButton() {
    switch (this) {
      case SDL_BUTTON_LEFT:
        return MouseButton.left;
      case SDL_BUTTON_MIDDLE:
        return MouseButton.middle;
      case SDL_BUTTON_RIGHT:
        return MouseButton.right;
      case SDL_BUTTON_X1:
        return MouseButton.x1;
      case SDL_BUTTON_X2:
        return MouseButton.x2;
      default:
        throw SdlError(this, 'Invalid mouse button.');
    }
  }
}

/// The base class for all mouse events.
class MouseEvent extends Event with WindowMixin, CoordinatesMixin<int> {
  /// Create an event.
  MouseEvent(
      {required Sdl sdl,
      required int timestamp,
      required int windowId,
      required this.which,
      required int x,
      required int y})
      : super(sdl, timestamp) {
    this.windowId = windowId;
    this.x = x;
    this.y = y;
  }

  /// The mouse instance ID.
  final int which;

  /// Returns `true` if this event was generated by touch input.
  bool get isTouchInput => which == SDL_TOUCH_MOUSEID;
}

/// A mouse has moved in the window.
///
/// [SDL Docs](https://wiki.libsdl.org/SDL_MouseMotionEvent)
class MouseMotionEvent extends MouseEvent {
  /// Create a motion event.
  MouseMotionEvent(
      {required Sdl sdl,
      required int timestamp,
      required int wndId,
      required int which,
      required this.state,
      required int x,
      required int y,
      required this.relativeX,
      required this.relativeY})
      : super(
            sdl: sdl,
            timestamp: timestamp,
            windowId: wndId,
            which: which,
            x: x,
            y: y);

  /// The state of the mouse button.
  final int state;

  /// Relative x.
  final int relativeX;

  /// Relative y.
  final int relativeY;

  /// Relative coordinates.
  Point<int> get relative => Point<int>(relativeX, relativeY);
}

/// A mouse button has been pressed or released.
///
/// [SDL Docs](https://wiki.libsdl.org/SDL_MouseButtonEvent)
class MouseButtonEvent extends MouseEvent {
  /// Create an event.
  MouseButtonEvent(
      {required Sdl sdl,
      required int timestamp,
      required int wndId,
      required int which,
      required this.button,
      required this.state,
      required this.clicks,
      required int x,
      required int y})
      : super(
            sdl: sdl,
            timestamp: timestamp,
            windowId: wndId,
            which: which,
            x: x,
            y: y);

  /// Create an instance from an event.
  MouseButtonEvent.fromSdlEvent(Sdl sdl, SDL_MouseButtonEvent e)
      : button = e.button.toMouseButton(),
        clicks = e.clicks,
        state = e.state.toPressedState(),
        super(
            sdl: sdl,
            timestamp: e.timestamp,
            which: e.which,
            windowId: e.windowID,
            x: e.x,
            y: e.y);

  /// The button which was pressed.
  final MouseButton button;

  /// Whether or not the button was pressed or released.
  final PressedState state;

  /// The number of clicks that were made.
  final int clicks;
}

/// A mouse wheel event.
///
/// [SDL Docs](https://wiki.libsdl.org/SDL_MouseWheelEvent)
class MouseWheelEvent extends MouseEvent {
  /// Create an event.
  MouseWheelEvent(
      {required Sdl sdl,
      required int timestamp,
      required int windowId,
      required int which,
      required int x,
      required int y,
      required this.direction})
      : super(
            sdl: sdl,
            timestamp: timestamp,
            windowId: windowId,
            which: which,
            x: x,
            y: y);

  /// The direction the wheel was moved.
  final MouseWheelDirection direction;
}
