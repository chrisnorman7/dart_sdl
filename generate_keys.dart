// ignore_for_file: avoid_print
/// Generate key and scan code enums.
import 'dart:io';

/// The heading for the output file.
const heading = """// ignore_for_file: constant_identifier_names
/// Automatically generated by `generate_keys.dart`.
import 'error.dart';
import 'sdl_bindings.dart';

/// Scancodes.
///
/// [SDL Docs](https://wiki.libsdl.org/SDL_Scancode)
enum ScanCode {""";

enum CurrentState {
  /// Hunting for scan codes or key codes.
  hunting,

  /// Parsing keycodes.
  keycodes,

  /// Parsing scancodes.
  scancodes,
}

/// A conversion.
class CodeConversion {
  /// Create a conversion.
  const CodeConversion(this.sdlName, this.dartName);

  /// The SDL name.
  final String sdlName;

  /// The dart_sdl name.
  final String dartName;
}

/// Run the program.
Future<void> main() async {
  const scancodePrefix = 'SCANCODE_';
  final inputFile = File('lib/src/sdl_bindings.dart');
  var state = CurrentState.hunting;
  final keycodes = <CodeConversion>[];
  final scancodes = <CodeConversion>[];
  final validCode = RegExp(r'^  static const int ([^ ]+) = [^$]+$');
  for (final line in inputFile.readAsLinesSync()) {
    if (line == 'abstract class SDL_KeyCode {') {
      state = CurrentState.keycodes;
      print('Parsing keycodes.');
    } else if (line == 'abstract class SDL_Scancode {') {
      state = CurrentState.scancodes;
      print('Parsing scancodes.');
    } else if (line == '}') {
      if (state == CurrentState.keycodes) {
        print('Finished parsing keycodes.');
      } else if (state == CurrentState.scancodes) {
        print('Finished parsing scancodes.');
      }
      state = CurrentState.hunting;
    } else if (state != CurrentState.hunting) {
      final match = validCode.firstMatch(line);
      if (match != null) {
        final sdlName = match.group(1);
        if (sdlName == null) {
          throw Exception('Parsing Error.');
        }
        var dartName = sdlName.substring('sdl_'.length);
        if (dartName.startsWith('_')) {
          dartName = dartName.substring(1);
        }
        if (dartName.startsWith(scancodePrefix)) {
          dartName = dartName.substring(scancodePrefix.length);
          print(dartName);
        }
        if (int.tryParse(dartName.substring(0, 1)) != null) {
          dartName = 'digit$dartName';
        } else if (dartName == 'RETURN') {
          dartName = 'return_';
        } else {
          dartName = dartName.toLowerCase();
        }
        final conversion = CodeConversion(sdlName, dartName);
        if (state == CurrentState.scancodes) {
          scancodes.add(conversion);
        } else if (state == CurrentState.keycodes) {
          keycodes.add(conversion);
        }
      }
    }
  }
  final outputFile = File('lib/src/keycodes.dart');
  final sink = outputFile.openWrite()..write(heading);
  for (final scancode in scancodes) {
    sink
      ..write('\n  /// ${scancode.sdlName}\n')
      ..write('  ${scancode.dartName},\n');
  }
  sink
    ..write('}\n\n/// Keycodes.\n///\n')
    ..write(
      '/// [SDL Docs](https://wiki.libsdl.org/SDL_Keycode)\nenum KeyCode {',
    );
  for (final keycode in keycodes) {
    sink
      ..write('\n  /// ${keycode.sdlName}\n')
      ..write('  ${keycode.dartName},\n');
  }
  sink
    ..write('}\n\n')
    ..write('/// An extension to return a [ScanCode] from an integer.\n')
    ..write('extension DartSdlScanCodeMethods on int {\n')
    ..write('  /// Return a scancode value.\n  ScanCode toScanCode() {\n')
    ..write('    switch (this) {\n');
  for (final scancode in scancodes) {
    sink
      ..write('      case SDL_Scancode.${scancode.sdlName}:\n')
      ..write('        return ScanCode.${scancode.dartName};\n');
  }
  sink
    ..write('      default:\n')
    ..write("        throw SdlError(this, 'Unknown scancode.');\n")
    ..write('    }\n  }\n}\n')
    ..write('\n')
    ..write('/// An extension to return a [KeyCode] from an integer.\n')
    ..write('extension DartSdlKeyCodeMethods on int {\n')
    ..write('  /// Return a keycode value.\n  KeyCode toKeyCode() {\n')
    ..write('    switch (this) {\n');
  for (final keycode in keycodes) {
    sink
      ..write('      case SDL_KeyCode.${keycode.sdlName}:\n')
      ..write('        return KeyCode.${keycode.dartName};\n');
  }
  sink
    ..write('      default:\n')
    ..write("        throw SdlError(this, 'Unknown keycode.');\n")
    ..write('    }\n  }\n}\n')
    ..writeln(
      '\n/// An extension to return an integer from a [ScanCode] value.',
    )
    ..writeln('extension SdlScancodeValueExtension on ScanCode {')
    ..writeln('  /// Convert this value to an SDL value.')
    ..writeln('  int toSdlValue() {')
    ..writeln('    switch (this) {');
  for (final conversion in scancodes) {
    sink
      ..writeln('      case ScanCode.${conversion.dartName}:')
      ..writeln('        return SDL_Scancode.${conversion.sdlName};');
  }
  sink
    ..writeln('    }')
    ..writeln('  }')
    ..writeln('}')
    ..writeln('\n/// An extension to return an integer from a [KeyCode] value.')
    ..writeln('extension SdlKeyCodeValueExtension on KeyCode {')
    ..writeln('  /// Convert this value to an SDL value.')
    ..writeln('  int toSdlValue() {')
    ..writeln('    switch (this) {');
  for (final conversion in keycodes) {
    sink
      ..writeln('      case KeyCode.${conversion.dartName}:')
      ..writeln('        return SDL_KeyCode.${conversion.sdlName};');
  }
  sink
    ..writeln('    }')
    ..writeln('  }')
    ..writeln('}');
  await sink.close();
  print('Scancodes: ${scancodes.length}.');
  print('Keycodes: ${keycodes.length}.');
}
